[
  {
    "objectID": "5XFADdata_python_tutorial.html",
    "href": "5XFADdata_python_tutorial.html",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "",
    "text": "If you haven’t already, install synapseclient (the Synapse python client package) using pip from the command line.\npip3 install --upgrade synapseclient\nWe will also use the python package pandas for data wrangling. If you don’t have it installed, install from the command line:\npip3 install pandas\nImport the synapseclient and pandas libraries and create a Synapse object.\n\nimport synapseclient\nimport pandas as pd\nsyn = synapseclient.Synapse()\n\n\n\n\nNext, you will need to log in to your Synapse account.\nFollow these instructions to generate a personal access token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n\nsyn.login(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapseclient, see the documentation here. If you have a .synapseCreds file stored in your home directory, you can simply run\n\nsyn.login()"
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#download-data",
    "href": "5XFADdata_python_tutorial.html#download-data",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "Download data",
    "text": "Download data\nWhile you can always download data from the AD Portal website via your web browser, it’s usually faster and often more convenient to download data programmatically.\n\nDownload a single file\nTo download a single file from the AD Knowledge Portal, you can click the linked file name to go to a page in the Synapse platform where that file is stored. Using the synID on that page, you can call the syn.get() function to download the file.\n\nExercise 1: Use Explore Data to find processed RNAseq data from the Jax.IU.Pitt_5XFAD Study\nThis filters the table to a single file. In the “Id” column for this htseqcounts_5XFAD.txt file, there is a unique Synapse ID (synID).\n\nWe can then use that synID to download the file.\n\ncounts_id =\"syn22108847\"\n\ncounts_file = syn.get(counts_id, downloadLocation = \"files/\")\n\nThe variable counts_file is a Synapse entity object. It has a variety of attributes, including .path, .properties, and .annotations that contain information about where the file is in Synapse, how it is labeled, what version it is, etc.\n\n# this is the entity's synID\n\ncounts_file.id\n\n'syn22108847'\n\n\n\n# the local path where the file was download\n\ncounts_file.path \n\n'/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/htseqcounts_5XFAD.txt'\n\n\n\n# the file version\n\ncounts_file.properties.versionNumber\n\n2\n\n\n\n\n\nBulk download files\n\nExercise 2: Use Explore Studies to find all metadata files from the Jax.IU.Pitt_5XFAD study\nUse the facets and search bar to look for data you want to download from the AD Knowledge Portal. Once you’ve identified the files you want, click on the download arrow icon on the top right of the Explore Data table and select “Programmatic Options” from the drop-down menu.\n\nIn the window that pops up, select the “Python” tab from the top menu bar. This will display some Python code that constructs a SQL query of the Synapse data table that drives the AD Knowledge Portal. This query will allow us to download only the files that meet our search criteria.\nThe function syn.tableQuery() returns query results as CSV file that is automatically downloaded to a Synapse cache directory .synapseCache in your home directory. You can use query.filepath to see the path to the file in the Synapse cache.\n\n# download the results of the filtered table query\n\nquery = syn.tableQuery(\"SELECT * FROM syn11346063 WHERE ( ( `study` HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( `resourceType` = 'metadata' ) )\")\n\n# view the file path of the resulting csv\n\nquery.filepath\n\n'/Users/alinden/.synapseCache/8/136284008/SYNAPSE_TABLE_QUERY_136284008.csv'\n\n\nWe’ll use the pandas function read.csv to read the CSV file as a data frame. We can explore the download_table object and see that it contains information on all of the AD Portal data files we want to download. Some columns like the “id” and “parentId” columns contain info about where the file is in Synapse, and some columns contain AD Portal annotations for each file, like “dataType”, “specimenID”, and “assay”. This annotation table will later allow us to link downloaded files to additional metadata variables!\n\n# read in the table query csv file\n\ndownload_table = pd.read_csv(query.filepath)\ndownload_table\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\ndataFileSizeBytes\n\n\n\n\n0\n22094731\n2\n10af2c18-a22b-4294-acd2-a58d3f49af73\nsyn22094731\nJax.IU.Pitt_5XFAD_assay_autorad_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"image\"]\n[\"autoradiography\"]\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1684528999504\n3427512\n75355920\nNaN\nNaN\nanimal\nNaN\n22454\n\n\n1\n22094732\n2\nbf808735-6793-47c4-9c8e-add847c66c57\nsyn22094732\nJax.IU.Pitt_5XFAD_assay_PET_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"image\"]\n[\"Positron Emission Tomography\"]\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1684528999561\n3427512\n75355925\nNaN\nNaN\nanimal\nNaN\n20460\n\n\n2\n22103212\n5\n982af708-77e8-4d31-b9dc-ae817829036b\nsyn22103212\nJax.IU.Pitt_5XFAD_individual_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\nNaN\nNaN\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1712682733219\n3427512\n136215768\nNaN\nNaN\nNaN\nNaN\n159129\n\n\n3\n22103213\n3\n248c214b-5d5c-4e36-9aa6-127e9180e412\nsyn22103213\nJax.IU.Pitt_5XFAD_biospecimen_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\nNaN\nNaN\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1684528999849\n3427512\n75356382\nNaN\nNaN\nanimal\nNaN\n36929\n\n\n4\n22110328\n4\n69fc8a06-b928-4f37-969d-47c7aa4c1ca1\nsyn22110328\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1684529010418\n3427512\n75357585\nNaN\nNaN\nanimal\nNaN\n5476\n\n\n\n\n5 rows × 46 columns\n\n\n\nFinally, we can use a for loop to loop through the “id” column and apply the syn.get() function to each file’s synID.\n\n# loop through the column of synIDs and download each file\n\nfor id in download_table.id:\n  syn.get(id, downloadLocation = \"files/\")\n\nCongratulations, you have bulk downloaded files from the AD Knowledge Portal!\n\n✏️ A note on file versions!\nAll files in the AD Portal are versioned, meaning that if the file represented by a particular synID changes, a new version will be created. You can access a specific versions by using the version argument in syn.get(). More info on version control in the AD Portal and the Synapse platform can be found here."
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#working-with-ad-portal-metadata",
    "href": "5XFADdata_python_tutorial.html#working-with-ad-portal-metadata",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "Working with AD Portal metadata",
    "text": "Working with AD Portal metadata\n\nMetadata basics\nWe have now downloaded several metadata files and an RNAseq counts file from the portal. For our next exercises, we want to read those files in as R data so we can work with them.\nWe can see from the download_table we got during the bulk download step that we have five metadata files. Two of these should be the individual and biospecimen files, and three of them are assay meetadata files.\n\ndownload_table[['name', 'metadataType', 'assay']]\n\n\n\n\n\n\n\n\nname\nmetadataType\nassay\n\n\n\n\n0\nJax.IU.Pitt_5XFAD_assay_autorad_metadata.csv\nassay\n[\"autoradiography\"]\n\n\n1\nJax.IU.Pitt_5XFAD_assay_PET_metadata.csv\nassay\n[\"Positron Emission Tomography\"]\n\n\n2\nJax.IU.Pitt_5XFAD_individual_metadata.csv\nindividual\nNaN\n\n\n3\nJax.IU.Pitt_5XFAD_biospecimen_metadata.csv\nbiospecimen\nNaN\n\n\n4\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\nassay\n[\"rnaSeq\"]\n\n\n\n\n\n\n\nWe are only interested in RNAseq data, so we will only read in the individual, biospecimen, and RNAseq assay metadata files. We will also read in the counts data file.\n\n# counts matrix\n\ncounts = pd.read_table(\"files/htseqcounts_5XFAD.txt\")\n\nWe can now read the metadata csv files in as pandas dataframes.\n\n# individual metadata\n\nind_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\")\n\n# biospecimen metadata\n\nbio_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv\")\n\n#assay metadata\n\nrna_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\")\n\nLet’s examine the data and metadata files a bit before we begin our analyses.\n\nCounts data\n\ncounts.head()\n\n\n\n\n\n\n\n\ngene_id\n32043rh\n32044rh\n32046rh\n32047rh\n32048rh\n32049rh\n32050rh\n32052rh\n32053rh\n...\n46887rh\n46888rh\n46889rh\n46890rh\n46891rh\n46892rh\n46893rh\n46895rh\n46896rh\n46897rh\n\n\n\n\n0\nENSG00000080815\n22554\n0\n0\n0\n16700\n0\n0\n19748\n14023\n...\n16072\n0\n16680\n13367\n0\n25119\n92\n0\n15934\n0\n\n\n1\nENSG00000142192\n344489\n4\n0\n1\n260935\n6\n8\n337456\n206851\n...\n258061\n0\n235530\n196721\n0\n371037\n1116\n0\n235343\n6\n\n\n2\nENSMUSG00000000001\n5061\n3483\n3941\n3088\n2756\n3067\n2711\n3334\n3841\n...\n3719\n3899\n4173\n4008\n3037\n5967\n3459\n4262\n3923\n3486\n\n\n3\nENSMUSG00000000003\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\nENSMUSG00000000028\n208\n162\n138\n127\n95\n154\n165\n124\n103\n...\n128\n210\n127\n156\n116\n260\n161\n189\n179\n117\n\n\n\n\n5 rows × 73 columns\n\n\n\nThe data file has a column of ENSEMBL gene ids and then a bunch of columns with count data, where the column headers correspond to the specimenIDs. These specimenIDs should all be in the RNAseq assay metadata file, so let’s check.\n\nrna_meta.head()\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\nrunType\nreadLength\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n1\n32044rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n2\n32046rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n3\n32047rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n4\n32049rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n\n\n\n\n\n\n# check that column headers in counts file match specimenIDs in assay metadata\n\ncol_names = list(counts.columns.values)[1:]\n\nspec_ids = list(rna_meta.specimenID)\n\nall(item in col_names for item in spec_ids)\n\nTrue\n\n\n\n\nAssay metadata\nThe assay metadata contains information about how data was generated on each sample in the assay. Each specimenID represents a unique sample. We can use some tools from pandas to explore the metadata.\nHow many unique specimens were sequenced?\n\nrna_meta['specimenID'].nunique()\n\n72\n\n\nWere the samples all sequenced on the same platform, or in the same batch?\n\nrna_meta[['platform', 'sequencingBatch']].nunique()\n\nplatform           1\nsequencingBatch    1\ndtype: int64\n\n\n\n\nBiospecimen metadata\nThe biospecimen metadata contains specimen-level information, including organ and tissue the specimen was taken from, how it was prepared, etc. Each specimenID is mapped to an individualID.\n\n# all specimens from the RNAseq assay metadata file should be in the biospecimen file\n\nrna_meta['specimenID'].isin(bio_meta['specimenID']).value_counts()\n\nTrue    72\nName: specimenID, dtype: int64\n\n\n\n# but the biospecimen file also contains specimens from different assays\n\nbio_meta['specimenID'].isin(rna_meta['specimenID']).value_counts()\n\nFalse    502\nTrue      72\nName: specimenID, dtype: int64\n\n\n\n\nIndividual metadata\nThe individual metadata contains information about all the individuals in the study, represented by unique individualIDs. For humans, this includes information on age, sex, race, diagnosis, etc. For MODEL-AD mouse models, the individual metadata has information on model genotypes, stock numbers, diet, and more.\n\n# all individualIDs in the biospecimen file should be in the individual file\n\nbio_meta['individualID'].isin(ind_meta['individualID']).value_counts()\n\nTrue    574\nName: individualID, dtype: int64\n\n\n\n# check model genotypes in this study\n\nind_meta['genotype'].unique()\n\narray(['5XFAD_carrier', '5XFAD_noncarrier'], dtype=object)\n\n\n\n\nJoining metadata\nWe use the three-file structure for our metadata because it allows us to store metadata for each study in a tidy format. Every line in the assay and biospecimen files represents a unique specimen, and every line in the individual file represents a unique individual. This means the files can be easily joined by specimenID and individualID to get all levels of metadata that apply to a particular data file. We will use the merge() function from pandas, with the how = \"left\" option to specify a left join.\n\n# join all the rows in the assay metadata that have a match in the biospecimen\n# metadata, then join all the rows in that dataframe to all rows that have a\n# match in the individual metadata\n\njoined_meta = rna_meta.merge(bio_meta, how = \"left\", on = \"specimenID\").merge(ind_meta, how = \"left\", on = \"individualID\")\n\njoined_meta\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\n...\nPhysicalMarker\ngeneration\nAnimalMatingStatus\njobNumber\nmicrochipID\nrodentDiet\nbirthID\nbrainWeight\nrodentWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n1\n32044rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289822454.0\n6%\nNaN\n0.482\n46.51\n5XFAD\n\n\n2\n32046rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289859181.0\n6%\nNaN\n0.470\n41.00\n5XFAD\n\n\n3\n32047rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289777416.0\n6%\nNaN\n0.454\n42.89\n5XFAD\n\n\n4\n32049rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX 5xFAD 12mo\n288770010.0\n6%\nNaN\n0.489\n29.96\n5XFAD\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n67\n46886rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.433\n24.23\n5XFAD\n\n\n68\n46889rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.452\n30.94\n5XFAD\n\n\n69\n46890rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.424\n32.50\n5XFAD\n\n\n70\n46892rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.491\n30.54\n5XFAD\n\n\n71\n46896rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.499\n28.78\n5XFAD\n\n\n\n\n72 rows × 53 columns\n\n\n\nWe now have a very wide dataframe that contains all the available metadata on each specimen in the RNAseq data from this study. This procedure can be used to join the three types of metadata files for every study in the AD Knowledge Portal, allowing you to filter individuals and specimens as needed based on your analysis criteria!\n\n\n\nSingle-specimen files\nFor files that contain data from a single specimen (e.g. raw sequencing files, raw mass spectra, etc.), we can use the Synapse annotations to associate these files with the appropriate metadata.\n\nExcercise 3: Use Explore Data to find all RNAseq files from the Jax.IU.Pitt_5XFAD study.\nIf we filter for data where Study = “Jax.IU.Pitt_5XFAD” and Assay = “rnaSeq” we will get a list of 148 files, including raw fastqs and processed counts data.\n\n\nSynapse entity annotations\nWe can use the function syn.get_annotations() to view the annotations associated with any file without downloading the file.\n\n# the synID of a random fastq file from our filtered search of fastq files\n\nrandom_fastq = \"syn22108503\"\n\n# extract the annotations as a dict\n\nfastq_annotations = syn.get_annotations(random_fastq)\n\nfastq_annotations\n\n{'sex': ['female'],\n 'room': ['JAX_MGL373'],\n 'assay': ['rnaSeq'],\n 'grant': ['U54AG054345'],\n 'organ': ['brain'],\n 'study': ['Jax.IU.Pitt_5XFAD'],\n 'tissue': ['right cerebral hemisphere'],\n 'bedding': ['aspen'],\n 'birthID': ['RMO1223'],\n 'climbID': ['298456'],\n 'species': ['Mouse'],\n 'waterpH': [2.85],\n 'ageDeath': [10.8196721311475],\n 'dataType': ['geneExpression'],\n 'genotype': ['5XFAD_carrier'],\n 'matingID': ['M-108-17'],\n 'dateBirth': ['1521417600000'],\n 'consortium': ['MODEL-AD'],\n 'fileFormat': ['fastq'],\n 'generation': ['N1F3'],\n 'rodentDiet': ['0.06'],\n 'specimenID': ['32043rh'],\n 'brainWeight': [0.503],\n 'dataSubtype': ['raw'],\n 'microchipID': ['288646853'],\n 'stockNumber': ['8730'],\n 'individualID': ['32043'],\n 'officialName': ['B6.Cg-Tg(APPSwFlLon,PSEN1*M146L*L286V)6799Vas/Mmjax'],\n 'resourceType': ['experimentalData'],\n 'rodentWeight': [28.76],\n 'ageDeathUnits': ['months'],\n 'isModelSystem': [False],\n 'materialOrigin': ['JAX'],\n 'isMultiSpecimen': [False],\n 'modelSystemName': ['5XFAD'],\n 'modelSystemType': ['animal'],\n 'nucleicAcidSource': ['bulk cell'],\n 'genotypeBackground': ['C57BL6J'],\n 'individualIdSource': ['JAX'],\n 'individualCommonGenotype': ['5XFAD']}\n\n\nThe file annotations let us see which study the file is associated with (Jax.IU.Pitt.5XFAD), which species it’s from (Mouse), which assay generated the file (rnaSeq), and a whole bunch of other properties. Most importantly, single-specimen files are annotated with with the specimenID of the specimen in the file, and the individualID of the individual that specimen was taken from. We can use these annotations to link files to the rest of the metadata, including metadata that is not in annotations. This is especially helpful for human studies, as potentially identifying information like age, race, and diagnosis is not included in file annotations.\n\n# find records belonging to the individual this file maps to in our joined\n# metadata the annotation value is a string but the individualID column in the\n# metadat is type int so we have to convert\n\njoined_meta[(joined_meta['individualID'] == int(fastq_annotations['individualID'][0]))]\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\n...\nPhysicalMarker\ngeneration\nAnimalMatingStatus\njobNumber\nmicrochipID\nrodentDiet\nbirthID\nbrainWeight\nrodentWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n\n\n1 rows × 53 columns\n\n\n\n\n\nAnnotations during bulk download\nWhen bulk downloading many files, the best practice is to preserve the download manifest that is generated which lists all the files, their synIDs, and all their annotations. If using the Synapse R client, follow the instructions in the Bulk download files section above.\nIf we use the “Programmatic Options” tab in the AD Portal download menu to download all 148 rnaSeq files from the 5XFAD study, we would get a table query that looks like this:\n\nquery = syn.tableQuery(\"SELECT * FROM syn11346063 WHERE ( ( \\\"study\\\" HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( \\\"assay\\\" HAS ( 'rnaSeq' ) ) )\")\n\nAs we saw previously, this downloads a csv file with the results of our AD Portal query. Opening that file lets us see which specimens are associated with which files:\n\nannotations_table = pd.read_csv(query.filepath)\n\nannotations_table\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\ndataFileSizeBytes\n\n\n\n\n0\n22108503\n1\n2e9f0fc9-ee3e-458c-a731-e08c7a8ae1e0\nsyn22108503\n32043_GT19_12829_CCGCGGTT-AGCGCTAG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000205\n3427512\n75357319\nNaN\nNaN\nanimal\nNaN\n4234330492\n\n\n1\n22108508\n1\na1dff08a-2e5b-49da-923c-af9ecc3b8cb5\nsyn22108508\n32044_GT19_12856_GGAGCGTC-GTCCGTGC_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000273\n3427512\n75357320\nNaN\nNaN\nanimal\nNaN\n3157791076\n\n\n2\n22108512\n1\n27d12b0a-756c-4703-88e8-01e81ab5025f\nsyn22108512\n32046_GT19_12865_CAACAATG-CTTCACGG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000345\n3427512\n75357321\nNaN\nNaN\nanimal\nNaN\n3194898678\n\n\n3\n22108519\n1\nd1f90004-582c-49db-bea0-478476437daf\nsyn22108519\n32047_GT19_12836_ATGAGGCC-GTTAATTG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000413\n3427512\n75357323\nNaN\nNaN\nanimal\nNaN\n2542370766\n\n\n4\n22108525\n1\n23aa924d-d8fc-406d-87ac-76bb15d6e557\nsyn22108525\n32049_GT19_12881_GCCACAGG-CATGCCAT_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000486\n3427512\n75357322\nNaN\nNaN\nanimal\nNaN\n2931163068\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n143\n22108846\n1\n1df3906a-c2a0-465b-8a97-2384f14a27a3\nsyn22108846\n46896_GT19_12890_CATAGAGT-TGCCACCA_R2_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529010148\n3427512\n75357566\nNaN\nNaN\nanimal\nNaN\n3566851836\n\n\n144\n22108847\n2\nb73bc1b8-2af8-48ce-a51b-ea6ded5624b5\nsyn22108847\nhtseqcounts_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529010219\n3427512\n75357567\nNaN\nNaN\nanimal\nNaN\n12803625\n\n\n145\n22108848\n2\n3384160a-6857-46b0-92fe-e0ae37c3d7ae\nsyn22108848\ntpm_gene_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529010285\n3427512\n75357570\nNaN\nNaN\nanimal\nNaN\n15483508\n\n\n146\n22108849\n2\n1b1aada8-5579-4de8-aaac-324f1b23074f\nsyn22108849\ntpm_isoform_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529010351\n3427512\n75357576\nNaN\nNaN\nanimal\nNaN\n42994443\n\n\n147\n22110328\n4\n69fc8a06-b928-4f37-969d-47c7aa4c1ca1\nsyn22110328\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nNaN\nNaN\n...\nsyn2580853\nsyn2580853\n1684529010418\n3427512\n75357585\nNaN\nNaN\nanimal\nNaN\n5476\n\n\n\n\n148 rows × 46 columns\n\n\n\nYou could then use a for loop as we did in the Bulk download files example to loop through the column of synIDs and download all 148 files.\nOnce you’ve downloaded all the files in the id column, you can link those files to their annotations by the name column. We’ll demonstrate this using the “random fastq” file that we got the annotations from earlier. To avoid downloading the whole 3GB file, we’ll use syn.get() with downloadFile = False to get only the Synapse entity object rather than the file.\n\nfastq = syn.get(random_fastq, downloadFile = False)\n\n# filter the annotations table to rows that match the fastq filename\n\nannotations_table[(annotations_table['name'] == fastq.properties.name)]\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\ndataFileSizeBytes\n\n\n\n\n0\n22108503\n1\n2e9f0fc9-ee3e-458c-a731-e08c7a8ae1e0\nsyn22108503\n32043_GT19_12829_CCGCGGTT-AGCGCTAG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\nsyn2580853\nsyn2580853\n1684529000205\n3427512\n75357319\nNaN\nNaN\nanimal\nNaN\n4234330492\n\n\n\n\n1 rows × 46 columns\n\n\n\n\n\n\nMultispecimen files\nMultispecimen files in the AD Knowledge Portal are files that contain data or information from more than one specimen. They are not annotated with individualIDs or specimenIDs, since these files may contain numbers of specimens that exceed the annotation limits. These files are usually processed or summary data (gene counts, peptide quantifications, etc), and are always annotated with isMultiSpecimen = TRUE.\nIf we look at the processed and normalized data files in the table of 5XFAD RNAseq file annotations we just downloaded , we will see that it isMultiSpecimen = TRUE, but individualID and specimenID are blank:\n\nannotations_table[(annotations_table['dataSubtype'].isin(['processed', 'normalized']))][['name','individualID', 'specimenID', 'isMultiSpecimen', 'dataSubtype']]\n\n\n\n\n\n\n\n\nname\nindividualID\nspecimenID\nisMultiSpecimen\ndataSubtype\n\n\n\n\n144\nhtseqcounts_5XFAD.txt\nNaN\nNaN\nTrue\nprocessed\n\n\n145\ntpm_gene_5XFAD.txt\nNaN\nNaN\nTrue\nnormalized\n\n\n146\ntpm_isoform_5XFAD.txt\nNaN\nNaN\nTrue\nnormalized\n\n\n\n\n\n\n\nThe multispecimen file should contain a row or column of specimenIDs that correspond to the specimenIDs used in a study’s metadata, as we have seen with the 5XFAD counts file.\n\n# In this example, we take a slice of the counts data to reduce computation,\n# transpose it so that each row represents a single specimen, and then join it\n# to the joined metadata by the specimenID\n\n# transpose\n\nsmall_counts = counts.head()\ntransposed = small_counts.transpose()\n\n# make geneIDs column headers\n\ntransposed = transposed.rename(columns = transposed.iloc[0]).drop(transposed.index[0])\n\n# make rownames into a column of specimenIDs\n\ntransposed.index.name = 'specimenID'\ntransposed = transposed.reset_index()\n\n# join to metadata\n\ntransposed.merge(joined_meta, how = 'left', on = 'specimenID')\n\n\n\n\n\n\n\n\nspecimenID\nENSG00000080815\nENSG00000142192\nENSMUSG00000000001\nENSMUSG00000000003\nENSMUSG00000000028\nplatform\nRIN\nrnaBatch\nlibraryBatch\n...\nPhysicalMarker\ngeneration\nAnimalMatingStatus\njobNumber\nmicrochipID\nrodentDiet\nbirthID\nbrainWeight\nrodentWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\n22554\n344489\n5061\n0\n208\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n1\n32044rh\n0\n4\n3483\n0\n162\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289822454.0\n6%\nNaN\n0.482\n46.51\n5XFAD\n\n\n2\n32046rh\n0\n0\n3941\n0\n138\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289859181.0\n6%\nNaN\n0.470\n41.00\n5XFAD\n\n\n3\n32047rh\n0\n1\n3088\n0\n127\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F3\nVirgin\nJAX 5xFAD 12mo\n289777416.0\n6%\nNaN\n0.454\n42.89\n5XFAD\n\n\n4\n32048rh\n16700\n260935\n2756\n0\n95\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX 5xFAD 12mo\n288855717.0\n6%\nNaN\n0.447\n25.57\n5XFAD\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n67\n46892rh\n25119\n371037\n5967\n0\n260\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.491\n30.54\n5XFAD\n\n\n68\n46893rh\n92\n1116\n3459\n0\n161\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.537\n25.37\n5XFAD\n\n\n69\n46895rh\n0\n0\n4262\n0\n189\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.501\n30.52\n5XFAD\n\n\n70\n46896rh\n15934\n235343\n3923\n0\n179\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.499\n28.78\n5XFAD\n\n\n71\n46897rh\n0\n6\n3486\n0\n117\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nNaN\nN1F4\nVirgin\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.514\n35.80\n5XFAD\n\n\n\n\n72 rows × 58 columns\n\n\n\nYou could now begin to compare counts of different genes across specimens from this study, perhaps grouping by sex, genotype, or age."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#setup",
    "href": "5XFAD_data_R_tutorial.html#setup",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Setup",
    "text": "Setup\n\nInstall and load packages\nIf you haven’t already, install synapser (the Synapse R client), as well as the tidyverse family of packages. The “tidyverse” package is shorthand for installing a bunch of packages we need for this notebook (dplyr, ggplot2, purrr, readr, stringr, tibble). It also installs “forcats” and “tidyr”, which are not used in this notebook.\n\ninstall.packages(\"synapser\", repos = c(\"http://ran.synapse.org\"))\ninstall.packages(c(\"tidyverse\", \"lubridate\"))\n\nLoad libraries\n\nlibrary(synapser)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(tibble)\nlibrary(ggplot2)\n\n\n\nLogin to Synapse\nNext, you will need to log in to your Synapse account.\n\nLogin option 1: Synapser takes credentials from your Synapse web session\nIf you are logged into the Synapse web browser, synapser will automatically use your login credentials to log you in during your R session! All you have to do is call synLogin() from a script or the R console.\n\nsynLogin()\n\n\n\nLogin option 2: Synapse PAT\nFollow these instructions to generate a Personal Access Token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n⚠ DO NOT put your Synapse access token in scripts that will be shared with others, or they will be able to log in as you.\n\nsynLogin(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapser, see the documentation here."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#download-data",
    "href": "5XFAD_data_R_tutorial.html#download-data",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Download data",
    "text": "Download data\nWhile you can always download data from the AD Portal website via your web browser, it’s usually faster and often more convenient to download data programmatically.\n\nDownload a single file\nTo download a single file from the AD Knowledge Portal, you can click the linked file name to go to a page in the Synapse platform where that file is stored. Using the synID on that page, you can call the synGet() function from synapser to download the file.\n\nExercise 1: Use Explore Data to find processed RNAseq data from the Jax.IU.Pitt_5XFAD Study\nThis filters the table to a single file. In the “Id” column for this htseqcounts_5XFAD.txt file, there is a unique Synapse ID (synID).\n\nWe can then use that synID to download the file. Some information about the file and its storage location within Synapse is printed to the R console when we call synGet.\n\ncounts_id &lt;- \"syn22108847\"\nsynGet(counts_id,\n       downloadLocation = \"files/\",\n       ifcollision = \"overwrite.local\") # Prevents making multiple copies\n\nThe argument ifcollision = \"overwrite.local\" means that instead of downloading the file and saving it as a new copy, it will overwrite the current file at that location if it already exists, to avoid cluttering your hard drive with multiple copies of the same file. Before downloading, synGet will check if the file on your hard drive is the same as the version on Synapse, and will only download from Synapse if the two files are different.\nThis is very useful for large files especially: you can ensure that you always have the latest copy of a file from Synapse, without having to re-download the file if you already have the current version on your hard drive.\nLet’s take a quick look at the file we just downloaded. Calling a tibble object will print the first ten rows in a nice tidy output; doing the same for a base R dataframe will print the whole thing until it runs out of memory. If you want to inspect a large dataframe, use head(df).\n\ncounts &lt;- read_tsv(\"files/htseqcounts_5XFAD.txt\", show_col_types = FALSE)\nhead(counts)\n\n\n  \n\n\n\n\n\n\nBulk download files\n\nExercise 2: Use Explore Studies to find all metadata files from the Jax.IU.Pitt_5XFAD study\nUse the facets and search bar to look for data you want to download from the AD Knowledge Portal. Once you’ve identified the files you want, click on the download arrow icon on the top right of the Explore Data table and select “Programmatic Options” from the drop-down menu.\n\nIn the window that pops up, select the “R” tab from the top menu bar. This will display some R code that constructs a SQL query of the Synapse data table that drives the AD Knowledge Portal. This query will allow us to download only the files that meet our search criteria.\n\nWe’ll download our files using two steps:\n\nWe will use the synTableQuery() code the portal gave us to download a CSV file that lists all of the files we want. This CSV file is a table, one row per file in the list, containing the Synapse ID, file name, annotations, etc associated with each file.\n\nThis does NOT download the files themselves. It only fetches a list of the files plus their annotations for you.\n\nWe will call synGet() on each Synapse ID in the table to download the files.\n\nWhy isn’t this just one step instead of two?\nSplitting this into steps can be extremely helpful for cases where you might not want to download all of the files back-to-back. For example, if the file sizes are very large or if you are downloading hundreds of files. Downloading the table first lets you: a) Fetch helpful annotations about the files without downloading them first, and b) do things like loop through the list one by one, download a file, do some processing, and delete the file before downloading the next one to save hard drive space.\nBack to downloading…\nThe function synTableQuery() returns a Synapse object wrapper around the CSV file, which is automatically downloaded to a folder called .synapseCache in your home directory. You can use query$filepath to see the path to the file in the Synapse cache.\n\n# download the results of the filtered table query\nquery_string &lt;- paste(\n  \"SELECT * FROM syn11346063 WHERE (( `study` HAS ( 'Jax.IU.Pitt_5XFAD' ))\",\n  \"AND ( `resourceType` = 'metadata' ) )\"\n)\n\nquery &lt;- synTableQuery(query_string, includeRowIdAndRowVersion = FALSE)\n\nDownloaded syn11346063 to /Users/jbeck/.synapseCache/522/149672522/SYNAPSE_TABLE_QUERY_149672522.csv\n\n# view the file path of the resulting csv\nquery$filepath\n\n[1] \"/Users/jbeck/.synapseCache/522/149672522/SYNAPSE_TABLE_QUERY_149672522.csv\"\n\n\nWe’ll use read_csv (from the readr package) to read the CSV file into R (although the provided read.table or any other base R version is also fine!). We can explore the download_table object and see that it contains information on all of the AD Portal data files we want to download. Some columns like the “id” and “parentId” columns contain info about where the file is in Synapse, and some columns contain AD Portal annotations for each file, like “dataType”, “specimenID”, and “assay”. This annotation table will later allow us to link downloaded files to additional metadata variables!\n\n# read in the table query csv file\ndownload_table &lt;- read_csv(query$filepath, show_col_types = FALSE)\n\ndownload_table\n\n\n  \n\n\n\nLet’s look at a subset of columns that might be useful:\n\ndownload_table %&gt;% \n  dplyr::select(id, name, metadataType, assay, fileFormat, currentVersion)\n\n\n  \n\n\n\nTip: Copy this file and save it somewhere memorable to have a complete record of all the files you are using and what version of each file was downloaded – for reproducibility!\nFinally, we use a mapping function from the purrr package to loop through the “id” column and apply the synGet() function to each file’s synID. In this case, we use purrr::walk() because it lets us call synGet() for its side effect (downloading files to a location we specify), and returns nothing.\n\n# loop through the column of synIDs and download each file\npurrr::walk(download_table$id, ~synGet(.x, downloadLocation = \"files/\", \n                                       ifcollision = \"overwrite.local\"))\n\nYou can also do this as a for loop, i.e.:\n\nfor (syn_id in download_table$id) {\n  synGet(syn_id,\n         downloadLocation = \"files/\",\n         ifcollision = \"overwrite.local\")\n}\n\nCongratulations, you have bulk downloaded files from the AD Knowledge Portal!\n\n✏ Note on download speeds\nFor situations where you are downloading many large files, the R client performs substantially slower than the command line client or the Python client. In these cases, you can use the instructions and code snippets for the command line or Python client provided in the “Programmatic Options” menu.\n\n\n✏ Note on file versions\nAll files in the AD Portal are versioned, meaning that if the file represented by a particular synID changes, a new version will be created. You can access a specific versions by using the version argument in synGet(). More info on version control in the AD Portal and the Synapse platform can be found here.\n\n\n\n\nSingle-specimen files\nFor files that contain data from a single specimen (e.g. raw sequencing files, raw mass spectra, etc.), we can use the Synapse annotations to associate these files with the appropriate metadata.\n\nExcercise 3: Use Explore Data to find all RNAseq files from the Jax.IU.Pitt_5XFAD study.\nIf we filter for data where Study = “Jax.IU.Pitt_5XFAD” and Assay = “rnaSeq” we will get a list of 148 files, including raw fastqs and processed counts data.\n\n\nSynapse entity annotations\nWe can use the function synGetAnnotations to view the annotations associated with any file before actually downloading the file.\n\n# the synID of a random fastq file from this list\nrandom_fastq &lt;- \"syn22108503\"\n\n# extract the annotations as a nested list\nfastq_annotations &lt;- synGetAnnotations(random_fastq)\n\nhead(fastq_annotations)\n\n$sex\n[1] \"female\"\n\n$room\n[1] \"JAX_MGL373\"\n\n$assay\n[1] \"rnaSeq\"\n\n$grant\n[1] \"U54AG054345\"\n\n$organ\n[1] \"brain\"\n\n$study\n[1] \"Jax.IU.Pitt_5XFAD\"\n\n\nThe file annotations let us see which study the file is associated with (Jax.IU.Pitt.5XFAD), which species it’s from (Mouse), which assay generated the file (rnaSeq), and a whole bunch of other properties. Most importantly, single-specimen files are annotated with with the specimenID of the specimen in the file, and the individualID of the individual that specimen was taken from. We can use these annotations to link files to the rest of the metadata, including metadata that is not in annotations. This is especially helpful for human studies, as potentially identifying information like age, race, and diagnosis is not included in file annotations.\n\nind_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\",\n                     show_col_types = FALSE)\n\n# find records belonging to the individual this file maps to in our joined metadata\nfilter(ind_meta, individualID == fastq_annotations$individualID[[1]])\n\n\n  \n\n\n\n\n\nAnnotations during bulk download\nWhen bulk downloading many files, the best practice is to preserve the download manifest that is generated which lists all the files, their synIDs, and all their annotations. If using the Synapse R client, follow the instructions in the Bulk download files section above.\nIf we use the “Programmatic Options” tab in the AD Portal download menu to download all 148 rnaSeq files from the 5XFAD study, we would get a table query that looks like this:\n\nquery_str &lt;- paste(\n  \"SELECT * FROM syn11346063 WHERE ( ( \\\"study\\\" HAS ( 'Jax.IU.Pitt_5XFAD' ) )\",\n  \"AND ( \\\"assay\\\" HAS ( 'rnaSeq' ) ) )\"\n)\nquery &lt;- synTableQuery(query_str, includeRowIdAndRowVersion = FALSE)\n\nDownloaded syn11346063 to /Users/jbeck/.synapseCache/530/149672530/SYNAPSE_TABLE_QUERY_149672530.csv\n\n\nAs we saw previously, this downloads a csv file with the results of our AD Portal query. Opening that file lets us see which specimens are associated with which files:\n\nannotations_table &lt;- read_csv(query$filepath, show_col_types = FALSE)\n\nannotations_table\n\n\n  \n\n\n\nYou could then use purrr::walk(download_table$id, ~synGet(.x, downloadLocation = &lt;your-download-directory&gt;)) to walk through the column of synIDs and download all 148 files. However, because these are large files, it might be preferable to use the Python client or command line client for increased speed.\n\n\n\nMultispecimen files\nMultispecimen files in the AD Knowledge Portal are files that contain data or information from more than one specimen. They are not annotated with individualIDs or specimenIDs, since these files may contain numbers of specimens that exceed the annotation limits. These files are usually processed or summary data (gene counts, peptide quantifications, etc), and are always annotated with isMultiSpecimen = TRUE.\nIf we look at the processed data files in the table of 5XFAD RNAseq file annotations we just downloaded, we will see that isMultiSpecimen = TRUE, but individualID and specimenID are blank:\n\nannotations_table |&gt;\n  filter(fileFormat == \"txt\") |&gt;\n  dplyr::select(name, individualID, specimenID, isMultiSpecimen)\n\n\n  \n\n\n\nNote: |&gt; is the base R pipe operator. If you are unfamiliar with the pipe, think of it as a shorthand for “take this (the preceding object) and do that (the subsequent command)”. See here for more info on piping in R.\nThe multispecimen file should contain a row or column of specimenIDs that correspond to the specimenIDs used in a study’s metadata, as we have seen with the 5XFAD counts file.\n\ncolnames(counts)[1:20]\n\n [1] \"gene_id\" \"32043rh\" \"32044rh\" \"32046rh\" \"32047rh\" \"32048rh\" \"32049rh\"\n [8] \"32050rh\" \"32052rh\" \"32053rh\" \"32057rh\" \"32059rh\" \"32061rh\" \"32062rh\"\n[15] \"32065rh\" \"32067rh\" \"32068rh\" \"32070rh\" \"32073rh\" \"32074rh\""
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#working-with-ad-portal-metadata",
    "href": "5XFAD_data_R_tutorial.html#working-with-ad-portal-metadata",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Working with AD Portal metadata",
    "text": "Working with AD Portal metadata\n\nMetadata basics\nWe have now downloaded several metadata files and an RNAseq counts file from the portal. For our next exercises, we want to read those files in as R data so we can work with them.\nWe can see from the download_table we got during the bulk download step that we have five metadata files. Two of these should be the individual and biospecimen files, and three of them are assay metadata files.\n\ndownload_table |&gt; \n  dplyr::select(name, metadataType, assay)\n\n\n  \n\n\n\nWe are only interested in RNAseq data, so we will only read in the individual, biospecimen, and RNAseq assay metadata files.\nNow we can read all the metadata files in to R as data frames.\n\n# individual metadata\nind_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\",\n                     show_col_types = FALSE)\n\n# biospecimen metadata\nbio_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv\",\n                     show_col_types = FALSE)\n\n# assay metadata\nrna_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\",\n                     show_col_types = FALSE)\n\n\n✏ Note on best practices\nWe’ve been using the ifcollision = \"overwrite.local\" argument to synGet() to avoid making multiple copies of each file, so hard-coding the file names in the code block above works as expected. However, if you forget this argument or the file gets renamed on Synapse, you could be reading in an old file instead of the one you just downloaded!\nsynGet() returns an object that contains the file path of the downloaded file, and it’s good practice to use this instead to avoid accidentally reading the wrong file. Some code to do this with the metadata files is below (but not executed in this notebook).\n\n# \"sapply\" loops through each item, applies the function to each one, and returns\n# a vector of results.\nfile_paths &lt;- sapply(download_table$id, function(syn_id) {\n  syn_obj &lt;- synGet(syn_id,\n                    downloadLocation = \"files/\",\n                    ifcollision = \"overwrite.local\")\n  return(syn_obj$path)\n})\n\n# See which files we want\nprint(file_paths)\n\nind_meta &lt;- read_csv(file_paths[3], show_col_types = FALSE)\nbio_meta &lt;- read_csv(file_paths[4], show_col_types = FALSE)\nrna_meta &lt;- read_csv(file_paths[5], show_col_types = FALSE)\n\n\n\n\nVerify file contents\nAt this point we have downloaded and read in the counts file and 3 metadata files into the variables counts, ind_meta, bio_meta, and rna_meta.\nLet’s examine the data and metadata files a bit before we begin our analyses.\n\nCounts data\n\nhead(counts)\n\n\n  \n\n\n\nThe counts data file has a column of Ensembl gene ids and then a bunch of columns with count data, where the column headers correspond to the specimenIDs. These specimenIDs should all be in the RNAseq assay metadata file, so let’s check.\n\nhead(rna_meta)\n\n\n  \n\n\n\nAre all the column headers from the counts matrix (except the first “gene_id” column) in the assay metadata?\n\nall(colnames(counts[-1]) %in% rna_meta$specimenID)\n\n[1] TRUE\n\n\n\n\nAssay metadata\nThe assay metadata contains information about how data was generated on each sample in the assay. Each specimenID represents a unique sample. We can use some tools from dplyr to explore the metadata.\nHow many unique specimens were sequenced?\n\nn_distinct(rna_meta$specimenID)\n\n[1] 72\n\n\nWere the samples all sequenced on the same platform?\n\ndistinct(rna_meta, platform)\n\n\n  \n\n\n\nWere there multiple sequencing batches reported?\n\ndistinct(rna_meta, sequencingBatch) \n\n\n  \n\n\n\n\n\nBiospecimen metadata\nThe biospecimen metadata contains specimen-level information, including organ and tissue the specimen was taken from, how it was prepared, etc. Each specimenID is mapped to an individualID.\n\nhead(bio_meta)\n\n\n  \n\n\n\nAll specimens from the RNAseq assay metadata file should be in the biospecimen file…\n\nall(rna_meta$specimenID %in% bio_meta$specimenID)\n\n[1] TRUE\n\n\n…But the biospecimen file also contains specimens from different assays.\n\nall(bio_meta$specimenID %in% rna_meta$specimenID)\n\n[1] FALSE\n\n\n\n\nIndividual metadata\nThe individual metadata contains information about all the individuals in the study, represented by unique individualIDs. For humans, this includes information on age, sex, race, diagnosis, etc. For MODEL-AD mouse models, the individual metadata has information on model genotypes, stock numbers, diet, and more.\n\nhead(ind_meta)\n\n\n  \n\n\n\nAll individualIDs in the biospecimen file should be in the individual file\n\nall(bio_meta$individualID %in% ind_meta$individualID)\n\n[1] TRUE\n\n\nWhich model genotypes are in this study?\n\ndistinct(ind_meta, genotype)\n\n\n  \n\n\n\n\n\n\nJoining metadata\nWe use the three-file structure for our metadata because it allows us to store metadata for each study in a tidy format. Every line in the assay and biospecimen files represents a unique specimen, and every line in the individual file represents a unique individual. This means the files can be easily joined by specimenID and individualID to get all levels of metadata that apply to a particular data file. We will use the left_join() function from the dplyr package, and the base R pipe operator |&gt;.\n\n# join all the rows in the assay metadata that have a match in the biospecimen metadata\njoined_meta &lt;- rna_meta |&gt; #start with the rnaseq assay metadata\n  \n  #join rows from biospecimen that match specimenID\n  left_join(bio_meta, by = \"specimenID\") |&gt;\n  \n  # join rows from individual that match individualID\n  left_join(ind_meta, by = \"individualID\")\n\njoined_meta\n\n\n  \n\n\n\nWe now have a very wide dataframe that contains all the available metadata on each specimen in the RNAseq data from this study. This procedure can be used to join the three types of metadata files for every study in the AD Knowledge Portal, allowing you to filter individuals and specimens as needed based on your analysis criteria!"
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#rnaseq-data-exploration",
    "href": "5XFAD_data_R_tutorial.html#rnaseq-data-exploration",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "RNASeq data exploration",
    "text": "RNASeq data exploration\nWe will use the counts data and metadata to do some basic exploratory analysis of gene expression in the Jax 5XFAD mouse model.\n\nExplore covariates\nWhich covariates from the metadata are we interested in?\n\n# all samples are from the same organ and tissue, so we can probably discard those\ndistinct(joined_meta, organ, tissue, sampleStatus)\n\n\n  \n\n\n# we have different sexes and genotypes, so we are probably interested in those\ndistinct(joined_meta, sex, genotype)\n\n\n  \n\n\n\nFor this example, we will plot gene expression by sex, genotype, and age.\n\nCreate timepoint column\nThe MODEL-AD individual mouse metadata contains columns with birth date and death date for each mouse. Using the RNASeq methods description from the Jax 5XFAD study page in the AD Portal, we expect this data to have equal numbers of individuals sampled at 4, 6, and 12 month timepoints. We can create a new column that captures this info in our joined metadata.\nNote: MODEL-AD studies added to the portal after June 2021 include an ‘ageDeath’ column that makes this simpler.\n\n# Convert columns of strings to month-date-year format using the lubridate package\njoined_meta_time &lt;- joined_meta |&gt;\n  mutate(dateBirth = mdy(dateBirth),\n         dateDeath = mdy(dateDeath)) |&gt;\n  \n  # create a new column that subtracts dateBirth from dateDeath in days, then\n  # divide by 30 to get months\n  mutate(timepoint = as.numeric(difftime(dateDeath, dateBirth, \n                                         units = \"days\")) / 30) |&gt;\n  \n  # convert numeric ages to timepoint categories\n  mutate(timepoint = case_when(timepoint &gt; 10 ~ \"12 mo\",\n                               timepoint &lt; 10 & timepoint &gt; 5 ~ \"6 mo\",\n                               timepoint &lt; 5 ~ \"4 mo\"))\n\nWe now have balanced samples across sex, genotype, and age:\n\n# check that the timepoint column looks ok\njoined_meta_time |&gt;\n  group_by(sex, genotype, timepoint) |&gt;\n  count()\n\n\n  \n\n\n\n\n\nSubset covariates\nTo reduce the width of the dataframe, we will subset only the columns that contain covariates we’re interested in exploring further. Retaining the individualID and specimenID columns will make sure we can map the covariates to the data and back to the original metadata if needed!\n\n# many packages have a \"select\" function that masks dplyr so we have to specify\ncovars &lt;- joined_meta_time |&gt;\n  dplyr::select(individualID, specimenID, sex, genotype, timepoint)\n\n# check the result\ncovars\n\n\n  \n\n\n\n\n\n\nConvert ensembleIDs to common gene names\nReturn to the gene counts matrix we read in earlier. 5XFAD mice express human APP and PSEN1, and the counts matrix includes these human genes (recognizable as starting with ENSG instead of ENSMUS):\n\ncounts |&gt; \n  filter(!str_detect(gene_id, \"MUS\"))\n\n\n  \n\n\n\nWe will have to manually add gene symbols for the human genes, but we can automatically get the Ensembl ID to gene symbol mapping for all of the mouse genes. There are many possible ways to do this in R. Below are two options:\n\n1. BiomaRt option:\nOPTIONAL: Transform the Ensembl IDs in the matrix to common gene names, using the R package biomaRt (note: must specify to use the mouse database, although the two genes in the 5XFAD model we identified above are humanized and won’t be translated by the program).\nFor this option, use the BioconductoR package manager to install biomaRt.\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"biomaRt\")\n\nlibrary(biomaRt)\n\n⚠️ The next two code chunks will not automatically execute in this notebook because they can take a long time – the code is included if you’d like to try this on your own.\nWe will use the two custom functions below to convert ensemblIDs to gene names:\n\n# This function uses biomaRt and converts ensemblIDs to HGNC names\nconvertEnsemblToHgnc &lt;- function(ensemblIds) {\n  ensembl &lt;- biomaRt::useMart('ENSEMBL_MART_ENSEMBL', \n                              dataset = 'mmusculus_gene_ensembl')\n  \n  genes &lt;- getBM(attributes = c('ensembl_gene_id', 'external_gene_name'),\n                 filters = 'ensembl_gene_id',\n                 values = ensemblIds,\n                 mart = ensembl)\n  return(genes)\n}\n\n# This function calls the previous function and further converts HGNC names to\n# Gene symbols\nMake.Gene.Symb &lt;- function(GeneENSG) {\n  GeneConv &lt;- convertEnsemblToHgnc(GeneENSG)\n  rownames(GeneConv) &lt;- GeneConv$ensembl_gene_id\n  \n  # If the Ensembl ID wasn't found in the BioMart query, the symbol will be NA\n  # for that ID. Otherwise this will match symbols to gene names and return them\n  # in the same order as GeneENSG.\n  Symb &lt;- GeneConv[GeneENSG, \"external_gene_name\"]\n  return(Symb)\n}\n\nCall the Make.Gene.Symb() function to add a new column with short gene names to our counts dataframe. This will take a minute – there are over 55k genes in our matrix!\n\nnamed_counts &lt;- counts |&gt;\n  # The \".after\" argument puts the new gene_name column right after the gene_id column\n  mutate(gene_name = Make.Gene.Symb(gene_id), .after = gene_id) \n\nhead(named_counts)\n\n\n\n2. Pre-translated option:\nFor this demonstration, instead of running biomaRt, which can be unreliable at times and take a long time to respond, we will append a dataframe to our counts matrix with short gene names already translated\n\nensembl_to_gene &lt;- read.csv(file = \"ensembl_translation_key.csv\")\nnamed_counts &lt;- counts %&gt;%\n  dplyr::left_join(ensembl_to_gene, by = \"gene_id\") %&gt;%\n  relocate(gene_name, .after = gene_id)\n\nhead(named_counts)\n\n\n  \n\n\n\nHow many genes are missing a gene symbol?\n\nsum(is.na(named_counts$gene_name))\n\n[1] 3900\n\n\nAre all the gene names unique?\n\nnon_na_genes &lt;- named_counts$gene_name[!is.na(named_counts$gene_name)]\nlength(non_na_genes) - n_distinct(non_na_genes)\n\n[1] 61\n\n\nWe need to clean up the humanized gene names and append unique identifiers to the duplicate names.\n\n# The first two genes in the matrix are the humanized genes PSEN1 (ENSG00000080815)\n# and APP (ENSG00000142192). Set these manually:\nnamed_counts[1, \"gene_name\"] &lt;- \"PSEN1\"\nnamed_counts[2, \"gene_name\"] &lt;- \"APP\"\n\n# Make all gene names unique and remove unneeded column\nnamed_counts &lt;- named_counts |&gt;\n  \n  # Replace NA symbols, make all symbols unique\n  mutate(gene_name = replace(gene_name, is.na(gene_name), \"UNKNOWN\"),\n         gene_name = make.unique(gene_name)) |&gt;\n  \n  # Throw away Ensembl IDs\n  dplyr::select(-gene_id) |&gt;\n  \n  # Set rownames to gene_name, also removes the gene_name column\n  column_to_rownames(var = \"gene_name\")\n\nhead(named_counts)\n\n\n  \n\n\n\n\n\nTranspose counts matrix and join to covariates\nNow we can transpose the dataframe so that each row contains count data cross all genes for an individual, and join our covariates by specimenID.\n\ncounts_tposed &lt;- named_counts |&gt;\n  t() |&gt;  # transposing also forces the df to a matrix\n  as_tibble(rownames = \"specimenID\") |&gt; # reconvert to tibble and specify rownames\n  left_join(covars, by = \"specimenID\") # join covariates by specimenID\n\n\n# check the transposed matrix looks ok\nhead(counts_tposed)\n\n\n  \n\n\n\nLet’s check that the covariates got included at the end by cutting out most of the genes:\n\ncounts_tposed %&gt;%\n  dplyr::select(1:3, which(colnames(.) %in% colnames(covars))) %&gt;%\n  head()\n\n\n  \n\n\n\n\n\n\nVisualize gene count data\nCreate simple box plots showing counts by genotype and time point, faceted by sex.\n\n# first make the timepoints column a factor and re-order the levels\ncounts_tposed$timepoint &lt;- factor(counts_tposed$timepoint, \n                                  levels = c(\"4 mo\", \"6 mo\", \"12 mo\"))\n\nUse ggplot to plot gene counts for each specimen by age, sex, and genotype.\n\n# Look at APP levels -- this model is the 5X FAD mutant, so we expect it to be high!\ng &lt;- counts_tposed |&gt;\n  ggplot(aes(x = timepoint, y = APP, color = genotype)) +\n    geom_boxplot() +\n    geom_point(position = position_jitterdodge()) +\n    facet_wrap( ~ sex) +\n    theme_bw() +\n    scale_color_manual(values = c(\"tomato3\", \"dodgerblue3\"))\n\ng\n\n\n\n\n\n\n\n\nExamine any gene of interest by setting the y argument in the ggplot(aes() mapping equal to the gene name. Ex: y = Trem2\n\ng &lt;- counts_tposed |&gt;\n  ggplot(aes(x = timepoint, y = Trem2, color = genotype)) +\n    geom_boxplot() +\n    geom_point(position = position_jitterdodge()) +\n    facet_wrap( ~ sex) +\n    theme_bw() +\n    scale_color_manual(values = c(\"tomato3\", \"dodgerblue3\"))\n\ng\n\n\n\n\n\n\n\n\nEx: y = Apoe\n\ng &lt;- counts_tposed |&gt;\n  ggplot(aes(x = timepoint, y = Apoe, color = genotype)) +\n    geom_boxplot() +\n    geom_point(position = position_jitterdodge()) +\n    facet_wrap( ~ sex) +\n    theme_bw() +\n    scale_color_manual(values = c(\"tomato3\", \"dodgerblue3\"))\n\ng\n\n\n\n\n\n\n\n\n\n\n\n\nR Package Info\n\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Monterey 12.7.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.1      tibble_3.2.1       stringr_1.5.1      lubridate_1.9.3   \n[5] readr_2.1.5        purrr_1.0.2        dplyr_1.1.4        synapser_2.1.1.259\n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4        generics_0.1.3    stringi_1.8.4     lattice_0.22-6   \n [5] hms_1.1.3         digest_0.6.37     magrittr_2.0.3    evaluate_1.0.1   \n [9] grid_4.4.1        timechange_0.3.0  fastmap_1.2.0     jsonlite_1.8.9   \n[13] Matrix_1.7-0      fansi_1.0.6       scales_1.3.0      codetools_0.2-20 \n[17] cli_3.6.3         rlang_1.1.4       crayon_1.5.3      bit64_4.5.2      \n[21] munsell_0.5.1     withr_3.0.1       yaml_2.3.10       tools_4.4.1      \n[25] parallel_4.4.1    tzdb_0.4.0        colorspace_2.1-1  reticulate_1.39.0\n[29] vctrs_0.6.5       R6_2.5.1          png_0.1-8         lifecycle_1.0.4  \n[33] htmlwidgets_1.6.4 bit_4.5.0         vroom_1.6.5       pkgconfig_2.0.3  \n[37] pillar_1.9.0      gtable_0.3.5      glue_1.8.0        Rcpp_1.0.13      \n[41] xfun_0.48         tidyselect_1.2.1  rstudioapi_0.16.0 knitr_1.48       \n[45] farver_2.1.2      rjson_0.2.21      htmltools_0.5.8.1 labeling_0.4.3   \n[49] rmarkdown_2.28    compiler_4.4.1"
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#setup",
    "href": "5XFADdata_python_tutorial.html#setup",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "",
    "text": "If you haven’t already, install synapseclient (the Synapse python client package) using pip from the command line.\npip3 install --upgrade synapseclient\nWe will also use the python package pandas for data wrangling. If you don’t have it installed, install from the command line:\npip3 install pandas\nImport the synapseclient and pandas libraries and create a Synapse object.\n\nimport synapseclient\nimport pandas as pd\nsyn = synapseclient.Synapse()\n\n\n\n\nNext, you will need to log in to your Synapse account.\nFollow these instructions to generate a personal access token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n\nsyn.login(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapseclient, see the documentation here. If you have a .synapseCreds file stored in your home directory, you can simply run\n\nsyn.login()"
  },
  {
    "objectID": "Workshop2_DESeq.html",
    "href": "Workshop2_DESeq.html",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "",
    "text": "This notebook will take the raw counts matrix and metadata files we downloaded in the first part of the workshop (5XFAD_data_R_tutorial.qmd) to run a basic differential expression analysis on a single time point (12 months) in male mice. You can amend the code to compare wild type and 5XFAD mice from either sex, at any time point. For a more in-depth tutorial on DESeq2 and how to handle more complicated experimental setups, see this vignette on DESeq2.\nThe data used in this notebook is obtained from The Jax.IU.Pitt_5XFAD Study (Jax.IU.Pitt_5XFAD), which can be found here on the AD Knowledge Portal."
  },
  {
    "objectID": "Workshop2_DESeq.html#run-deseq",
    "href": "Workshop2_DESeq.html#run-deseq",
    "title": "Differential Analysis of 5xFAD mouse models",
    "section": "Run DESeq",
    "text": "Run DESeq\nThis function normalizes the read counts, estimates dispersions, and fits the linear model using the formula we specified in design above (~ genotype)\n\ndds &lt;- DESeq(ddsHTSeq, parallel = TRUE)"
  },
  {
    "objectID": "Workshop2_DESeq.html#extract-a-table-of-results",
    "href": "Workshop2_DESeq.html#extract-a-table-of-results",
    "title": "Differential Analysis of 5xFAD mouse models",
    "section": "Extract a table of results",
    "text": "Extract a table of results\nThe significance threshold can be set using the alpha argument of the results function. Here we use 0.05.\n\nres &lt;- results(dds, alpha = 0.05)                        \nsummary(res)\n\n\nout of 40784 with nonzero total read count\nadjusted p-value &lt; 0.05\nLFC &gt; 0 (up)       : 1091, 2.7%\nLFC &lt; 0 (down)     : 492, 1.2%\noutliers [1]       : 33, 0.081%\nlow counts [2]     : 15803, 39%\n(mean count &lt; 6)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nhead(as.data.frame(res))\n\n\n  \n\n\n\nMap Ensembl IDs to gene symbol names and Entrez IDs. This time, we’ll use a different package to translate mouse Ensembl IDs to gene names. Run these two functions and they will be called up when assembling results from the differential expression analysis.\n\n# functions to extract entrezid and symbols from ENSEMBL IDs\nmap_symbol.rname &lt;- function(x) {\n  mapIds(org.Mm.eg.db, keys = row.names(x), column = \"SYMBOL\", \n         keytype = \"ENSEMBL\", multiVals = \"first\")\n}\n\nmap_eid.rname &lt;- function(x) {\n  mapIds(org.Mm.eg.db, keys = row.names(x), column = \"ENTREZID\", \n         keytype = \"ENSEMBL\", multiVals = \"first\")\n}\n\n\nAll_res &lt;- as.data.frame(res) %&gt;% \n  mutate(symbol = map_symbol.rname(.), .before = baseMean) %&gt;% \n  mutate(EntrezGene = map_eid.rname(.), .after = symbol)\n\n#label human gene names\nAll_res[\"ENSG00000080815\", \"symbol\"] &lt;- \"PSEN1\"\nAll_res[\"ENSG00000142192\", \"symbol\"] &lt;- \"APP\"\n\nhead(All_res)"
  },
  {
    "objectID": "Workshop2_DESeq.html#setup",
    "href": "Workshop2_DESeq.html#setup",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "Setup",
    "text": "Setup\n\nInstall and load packages\nWe will need several new packages from Bioconductor to run this analysis:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"DESeq2\", \"EnhancedVolcano\"))\n\nIf not already installed, be sure to install the synapser, tidyverse, and lubridate packages from part 1 of this workshop.\nLoad necessary libraries.\n\nlibrary(DESeq2)\nlibrary(ggplot2)\nlibrary(EnhancedVolcano)\nlibrary(dplyr)\nlibrary(synapser)\nlibrary(readr)\nlibrary(tibble)\nlibrary(lubridate)"
  },
  {
    "objectID": "Workshop2_DESeq.html#download-counts-and-metadata-from-synapse",
    "href": "Workshop2_DESeq.html#download-counts-and-metadata-from-synapse",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "Download counts and metadata from Synapse",
    "text": "Download counts and metadata from Synapse\nThe code below is a (more condensed) repeat of the code from Part 1 of the workshop (5XFAD_data_r_tutorial.qmd) that fetches the counts file and metadata files. If you have just run that notebook and still have counts and covars in your environment, you likely do not need to re-run the code below and can skip to Modify the data for analysis.\nFirst, we log in to Syanpse:\n\nsynLogin()\n\nThen, we fetch the counts and metadata files. As mentioned in part 1, it is good practice to assign the output of synGet to a variable and use variable$path to reference the file name, as done below. For this part of the workshop, we will skip the bulk download step for metadata files and instead download each file by ID.\n\n# counts\ncounts_id &lt;- \"syn22108847\"\ncounts_file &lt;- synGet(counts_id,\n                      downloadLocation = \"files/\",\n                      ifcollision = \"overwrite.local\")\ncounts &lt;- read_tsv(counts_file$path, show_col_types = FALSE)\n\n# individual metadata\nind_metaID &lt;- \"syn22103212\"\nind_file &lt;- synGet(ind_metaID,\n                   downloadLocation = \"files/\",\n                   ifcollision = \"overwrite.local\")\nind_meta &lt;- read_csv(ind_file$path, show_col_types = FALSE)\n\n# biospecimen metadata\nbio_metaID &lt;- \"syn22103213\"\nbio_file &lt;- synGet(bio_metaID,\n                   downloadLocation = \"files/\",\n                   ifcollision = \"overwrite.local\")\nbio_meta &lt;- read_csv(bio_file$path, show_col_types = FALSE)\n\n# RNA assay metadata\nrna_metaID &lt;- \"syn22110328\"\nrna_file &lt;- synGet(rna_metaID,\n                   downloadLocation = \"files/\",\n                   ifcollision = \"overwrite.local\")\nrna_meta &lt;- read_csv(rna_file$path, show_col_types = FALSE)\n\n\nJoin metadata files together\nJoin the three metadata files by IDs in common so we can associate the column names of counts (which are specimenIDs) with individual mice from the individual metadata file.\n\njoined_meta &lt;- rna_meta |&gt; # start with the rnaseq assay metadata\n  \n  # join rows from biospecimen that match specimenID\n  left_join(bio_meta, by = \"specimenID\") |&gt; \n  \n  # join rows from individual that match individualID\n  left_join(ind_meta, by = \"individualID\") \n\nCreate a timepoint variable (months since birth) from the dateBirth and dateDeath fields in the metadata.\n\n# convert columns of strings to month-date-year format using lubridate\njoined_meta_time &lt;- joined_meta |&gt;\n  mutate(dateBirth = mdy(dateBirth),\n         dateDeath = mdy(dateDeath)) |&gt;\n  \n  # create a new column that subtracts dateBirth from dateDeath in days, then\n  # divide by 30 to get months\n  mutate(timepoint = as.numeric(difftime(dateDeath, dateBirth, \n                                         units = \"days\")) / 30) |&gt;\n  \n  # convert numeric ages to timepoint categories\n  mutate(timepoint = case_when(timepoint &gt; 10 ~ \"12 mo\",\n                               timepoint &lt; 10 & timepoint &gt; 5 ~ \"6 mo\",\n                               timepoint &lt; 5 ~ \"4 mo\"))\n\n# check that the timepoint column looks ok (should be 6 mice in each group)\njoined_meta_time |&gt;\n  group_by(sex, genotype, timepoint) |&gt;\n  count()\n\n\n  \n\n\n\nSelect the covariates needed for the analysis\n\ncovars &lt;- joined_meta_time |&gt;\n  dplyr::select(individualID, specimenID, sex, genotype, timepoint)\n\ncovars\n\n\n  \n\n\n\nUtility function that maps Ensembl IDs to gene symbols (copied from Part 1)\n\n# Assumes that the rownames of \"df\" are the Ensembl IDs\nmap_ensembl_ids &lt;- function(df) {\n  ensembl_to_gene &lt;- read.csv(file = \"ensembl_translation_key.csv\")\n  \n  mapped_df &lt;- df |&gt;\n    # Make a gene_id column that matches the ensembl_to_gene table\n    rownames_to_column(\"gene_id\") |&gt;\n    dplyr::left_join(ensembl_to_gene, by = \"gene_id\") |&gt;\n    relocate(gene_name, .after = gene_id)\n  \n  # The first two genes in the matrix are the humanized genes PSEN1\n  # (ENSG00000080815) and APP (ENSG00000142192). Set these manually:\n  mapped_df[1, \"gene_name\"] &lt;- \"PSEN1\"\n  mapped_df[2, \"gene_name\"] &lt;- \"APP\"\n  \n  return(mapped_df)\n}\n\nEnd of repeated code from part 1."
  },
  {
    "objectID": "Workshop2_DESeq.html#differential-expression-analysis-using-deseq2",
    "href": "Workshop2_DESeq.html#differential-expression-analysis-using-deseq2",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "Differential Expression Analysis using DESeq2",
    "text": "Differential Expression Analysis using DESeq2\nSet up data for analysis. All samples are male, 12 month old mice, so we are only interested in looking at the effect of genotype on the data. We specify this for DESeq2 by setting the design argument to ~ genotype. This tells DESeq2 to use the linear model expression ~ genotype when solving for the effect of genotype. For this to work properly, we need to make sure genotype is a factor so DESeq2 knows it is a categorical value.\n\nmeta.12M.Male$genotype &lt;- factor(meta.12M.Male$genotype)\n\nddsHTSeq &lt;- DESeqDataSetFromMatrix(countData = counts.12M.Male,\n                                   colData = meta.12M.Male,\n                                   design = ~ genotype)\n\nNote on R formula syntax: Using ~ variable will automatically be expanded to represent the linear equation expression ~ (beta1 * 1) + (beta2 * variable), where 1 represents the intercept of the equation and beta1 and beta2 are the coefficients that should be estimated.\nFor more complicated formula setup, refer to the DESeq2 vignette.\nBack to analysis…\nFilter out genes that have all zero counts across all samples. You can also use more stringent criteria like only keeping genes that have at least X counts in at least Y samples, but for this workshop we will just remove zero-genes.\n\npaste(\"Total genes before filtering:\", nrow(ddsHTSeq))\n\n[1] \"Total genes before filtering: 55489\"\n\nddsHTSeq &lt;- ddsHTSeq[rowSums(counts(ddsHTSeq)) &gt;= 1, ]\n\npaste(\"Total genes after filtering:\", nrow(ddsHTSeq))\n\n[1] \"Total genes after filtering: 40784\"\n\n\nSet wild-type mice (5XFAD_noncarrier) as the reference genotype, so the comparison is 5XFAD_carrier - 5XFAD_noncarrier.\n\nddsHTSeq$genotype &lt;- relevel(ddsHTSeq$genotype, ref = \"5XFAD_noncarrier\")   \n\n\nRun DESeq\nThis function normalizes the read counts, estimates dispersions, and fits the linear model using the formula we specified in design above (~ genotype)\n\ndds &lt;- DESeq(ddsHTSeq, parallel = TRUE)\n\n\n\nExtract a table of results\nThe significance threshold can be set using the alpha argument of the results function. Here we use 0.05.\n\nres &lt;- results(dds, alpha = 0.05)\nsummary(res)\n\n\nout of 40784 with nonzero total read count\nadjusted p-value &lt; 0.05\nLFC &gt; 0 (up)       : 1091, 2.7%\nLFC &lt; 0 (down)     : 492, 1.2%\noutliers [1]       : 33, 0.081%\nlow counts [2]     : 15803, 39%\n(mean count &lt; 6)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nhead(as.data.frame(res))\n\n\n  \n\n\n\nAdd gene symbols to the results\n\nres &lt;- map_ensembl_ids(as.data.frame(res))\n\nWhat are some of the top up-regulated genes?\n\nres |&gt;\n  subset(padj &lt; 0.05) |&gt;\n  slice_max(order_by = log2FoldChange, n = 10) %&gt;%\n  select(gene_id, gene_name, log2FoldChange, padj)\n\n\n  \n\n\n\nWhat are some of the top down-regulated genes?\n\nres |&gt;\n  subset(padj &lt; 0.05) |&gt;\n  slice_min(order_by = log2FoldChange, n = 10) %&gt;%\n  select(gene_id, gene_name, log2FoldChange, padj)"
  },
  {
    "objectID": "Workshop2_DESeq.html#plot-results",
    "href": "Workshop2_DESeq.html#plot-results",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "Plot results",
    "text": "Plot results\nVolcano plot of differential expression results: all genes with p &lt; 0.05 and log2FC &gt; 0.5\n\nplot_DEGvolcano &lt;- EnhancedVolcano(res,\n                                   lab = res$gene_name,\n                                   x = 'log2FoldChange',\n                                   y = 'padj',\n                                   legendPosition = 'none',\n                                   title = 'DE Results of 12 mo. old Male Mice',\n                                   subtitle = '',\n                                   FCcutoff = 0.5,\n                                   pCutoff = 0.05,\n                                   xlim = c(-3, 17),\n                                   pointSize = 1,\n                                   labSize = 4)\n\nplot_DEGvolcano\n\n\n\n\n\n\n\n\nSave results table and plot:\n\nwrite.csv(res, file=\"5XFAD_DEresults_12mo_males.csv\", row.names=FALSE)\n\nggsave(\"VolcanoPlot.png\", width = 8, height = 6, units = \"in\")"
  },
  {
    "objectID": "Workshop2_DESeq.html#install-and-load-packages",
    "href": "Workshop2_DESeq.html#install-and-load-packages",
    "title": "Differential Expression Analysis of 5xFAD mouse models",
    "section": "Install and load packages",
    "text": "Install and load packages\nWe will need several new packages from Bioconductor to run this analysis:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"DESeq2\", \"org.Mm.eg.db\",\"GO.db\", \"EnhancedVolcano\", \"AnnotationDbi\"))\n\n# If necessary, install these packages as well\n#install.packages(c(\"tidyverse\", \"ggplot2\", \"dplyr\"))\n\nLoad necessary libraries.\n\nlibrary(DESeq2)\nlibrary(ggplot2)\nlibrary(AnnotationDbi)\nlibrary(org.Mm.eg.db)\nlibrary(GO.db)\nlibrary(EnhancedVolcano)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(synapser)\nlibrary(lubridate)"
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#overview",
    "href": "5XFAD_data_R_tutorial.html#overview",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Overview",
    "text": "Overview\nWe will be working with metadata and RNAseq counts data from The Jax.IU.Pitt_5XFAD Study (Jax.IU.Pitt_5XFAD), which can be found here on the AD Knowledge Portal. During this workshop we will use R to:\n\nLog in to Synapse\nDownload the counts file (single-file download from Synapse)\nDownload the metadata files (bulk data download from Synapse)\nMap samples in data files to information in metadata files\nExplore the data"
  },
  {
    "objectID": "Workshop2_DESeq.html#modify-the-data-for-analysis",
    "href": "Workshop2_DESeq.html#modify-the-data-for-analysis",
    "title": "AD Knowledge Portal Workshop: Differential Expression Analysis of 5xFAD mouse models",
    "section": "Modify the data for analysis",
    "text": "Modify the data for analysis\nClean up the covars data: coerce covars into a dataframe, label the rows by specimenID, and check the result\n\ncovars &lt;- as.data.frame(covars)\nrownames(covars) &lt;- covars$specimenID\ncovars\n\n\n  \n\n\n\nOrder the data (counts columns and metadata rows MUST be in the same order), and subset the counts matrix and metadata to include only 12 month old male mice\n\nmeta.12M.Male &lt;- covars |&gt;\n  subset(sex == \"male\" & timepoint == \"12 mo\")\n\n# Subsets counts to only the 12 month male samples, and puts the samples in the\n# same order they appear in meta.12M.Male\ncounts.12M.Male &lt;- counts |&gt;\n  # Set the rownames to the gene ID, remove \"gene_id\" column\n  column_to_rownames(\"gene_id\") |&gt;\n  # Only use columns that appear in meta.12M.Male\n  select(meta.12M.Male$specimenID)\n\nThis leaves us with 12 samples, 6 per genotype:\n\nmeta.12M.Male |&gt;\n  group_by(sex, genotype, timepoint) |&gt;\n  count()\n\n\n  \n\n\n\nVerify that the columns in counts.12M.Male are in the same order as the specimenIDs in meta.12M.Male:\n\nall(colnames(counts.12M.Male) == meta.12M.Male$specimenID)\n\n[1] TRUE\n\n\nWe should now have:\n\nA data.frame of metadata for 12-month-old male mice, one row per specimen\nA matrix of counts where each row is a gene and each column is a single specimen\n\nWe can now analyze this data with DESeq2."
  }
]