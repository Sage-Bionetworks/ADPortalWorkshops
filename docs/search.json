[
  {
    "objectID": "5XFADdata_python_tutorial.html",
    "href": "5XFADdata_python_tutorial.html",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "",
    "text": "If you haven’t already, install synapseclient (the Synapse python client package) using pip from the command line.\npip3 install --upgrade synapseclient\nWe will also use the python package pandas for data wrangling. If you don’t have it installed, install from the command line:\npip3 install pandas\nImport the synapseclient and pandas libraries and create a Synapse object.\n\nimport synapseclient\nimport pandas as pd\nsyn = synapseclient.Synapse()\n\n\n\n\nNext, you will need to log in to your Synapse account.\nFollow these instructions to generate a personal access token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n\nsyn.login(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapseclient, see the documentation here. If you have a .synapseCreds file stored in your home directory, you can simply run\n\nsyn.login()"
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#download-data",
    "href": "5XFADdata_python_tutorial.html#download-data",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "Download data",
    "text": "Download data\nWhile you can always download data from the AD Portal website via your web browser, it’s usually faster and often more convenient to download data programmatically.\n\nDownload a single file\nTo download a single file from the AD Knowledge Portal, you can click the linked file name to go to a page in the Synapse platform where that file is stored. Using the synID on that page, you can call the syn.get() function to download the file.\n\nExercise 1: Use Explore Data to find processed RNAseq data from the Jax.IU.Pitt_5XFAD Study\nThis filters the table to a single file. In the “Id” column for this htseqcounts_5XFAD.txt file, there is a unique Synapse ID (synID).\n\nWe can then use that synID to download the file.\n\ncounts_id =\"syn22108847\"\n\ncounts_file = syn.get(counts_id, downloadLocation = \"files/\")\n\nThe variable counts_file is a Synapse entity object. It has a variety of attributes, including .path, .properties, and .annotations that contain information about where the file is in Synapse, how it is labeled, what version it is, etc.\n\n# this is the entity's synID\n\ncounts_file.id\n\n'syn22108847'\n\n\n\n# the local path where the file was download\n\ncounts_file.path \n\n'/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/htseqcounts_5XFAD.txt'\n\n\n\n# the file version\n\ncounts_file.properties.versionNumber\n\n2\n\n\n\n\n\nBulk download files\n\nExercise 2: Use Explore Studies to find all metadata files from the Jax.IU.Pitt_5XFAD study\nUse the facets and search bar to look for data you want to download from the AD Knowledge Portal. Once you’ve identified the files you want, click on the download arrow icon on the top right of the Explore Data table and select “Programmatic Options” from the drop-down menu.\n\nIn the window that pops up, select the “Python” tab from the top menu bar. This will display some Python code that constructs a SQL query of the Synapse data table that drives the AD Knowledge Portal. This query will allow us to download only the files that meet our search criteria.\nThe function syn.tableQuery() returns query results as CSV file that is automatically downloaded to a Synapse cache directory .synapseCache in your home directory. You can use query.filepath to see the path to the file in the Synapse cache.\n\n# download the results of the filtered table query\n\nquery = syn.tableQuery(\"SELECT * FROM syn11346063.37 WHERE ( ( `study` HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( `resourceType` = 'metadata' ) )\")\n\n# view the file path of the resulting csv\n\nquery.filepath\n\n'/Users/alinden/.synapseCache/835/126944835/SYNAPSE_TABLE_QUERY_126944835.csv'\n\n\nWe’ll use the pandas function read.csv to read the CSV file as a data frame. We can explore the download_table object and see that it contains information on all of the AD Portal data files we want to download. Some columns like the “id” and “parentId” columns contain info about where the file is in Synapse, and some columns contain AD Portal annotations for each file, like “dataType”, “specimenID”, and “assay”. This annotation table will later allow us to link downloaded files to additional metadata variables!\n\n# read in the table query csv file\n\ndownload_table = pd.read_csv(query.filepath)\ndownload_table\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\ncurrentVersion\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\n\n\n\n\n0\n22094731\n2\n84e4bc38-9fb4-429a-a9c0-117e49b26307\nsyn22094731\nJax.IU.Pitt_5XFAD_assay_autorad_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"image\"]\n[\"autoradiography\"]\nNaN\nNaN\n...\n2\nsyn2580853\nsyn2580853\n1634772340295\n3420438\n75355920\nNaN\nNaN\nanimal\nNaN\n\n\n1\n22094732\n2\n266ec572-1c42-4880-8071-58fb4bafd61d\nsyn22094732\nJax.IU.Pitt_5XFAD_assay_PET_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"image\"]\n[\"Positron Emission Tomography\"]\nNaN\nNaN\n...\n2\nsyn2580853\nsyn2580853\n1634772340339\n3420438\n75355925\nNaN\nNaN\nanimal\nNaN\n\n\n2\n22103212\n3\n7229ee91-435e-4c26-b9c1-ab623125f65e\nsyn22103212\nJax.IU.Pitt_5XFAD_individual_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\nNaN\nNaN\nNaN\nNaN\n...\n3\nsyn2580853\nsyn2580853\n1642645133885\n3427512\n87202568\nNaN\nNaN\nanimal\nNaN\n\n\n3\n22103213\n3\nce970c4c-d929-4e55-828e-5b298a59c204\nsyn22103213\nJax.IU.Pitt_5XFAD_biospecimen_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\nNaN\nNaN\nNaN\nNaN\n...\n3\nsyn2580853\nsyn2580853\n1634772352884\n3420438\n75356382\nNaN\nNaN\nanimal\nNaN\n\n\n4\n22110328\n4\n20cf3097-4cb0-4507-9e59-1087c3c9ab71\nsyn22110328\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nNaN\nNaN\n...\n4\nsyn2580853\nsyn2580853\n1634772370968\n3420438\n75357585\nNaN\nNaN\nanimal\nNaN\n\n\n\n\n5 rows × 45 columns\n\n\n\nFinally, we can use a for loop to loop through the “id” column and apply the syn.get() function to each file’s synID.\n\n# loop through the column of synIDs and download each file\n\nfor id in download_table.id:\n  syn.get(id, downloadLocation = \"files/\")\n\nCongratulations, you have bulk downloaded files from the AD Knowledge Portal!"
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#working-with-ad-portal-metadata",
    "href": "5XFADdata_python_tutorial.html#working-with-ad-portal-metadata",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "Working with AD Portal metadata",
    "text": "Working with AD Portal metadata\n\nMetadata basics\nWe have now downloaded several metadata files and an RNAseq counts file from the portal. For our next exercises, we want to read those files in as R data so we can work with them.\nWe can see from the download_table we got during the bulk download step that we have five metadata files. Two of these should be the individual and biospecimen files, and three of them are assay meetadata files.\n\ndownload_table[['name', 'metadataType', 'assay']]\n\n\n\n\n\n\n\n\nname\nmetadataType\nassay\n\n\n\n\n0\nJax.IU.Pitt_5XFAD_assay_autorad_metadata.csv\nassay\n[\"autoradiography\"]\n\n\n1\nJax.IU.Pitt_5XFAD_assay_PET_metadata.csv\nassay\n[\"Positron Emission Tomography\"]\n\n\n2\nJax.IU.Pitt_5XFAD_individual_metadata.csv\nindividual\nNaN\n\n\n3\nJax.IU.Pitt_5XFAD_biospecimen_metadata.csv\nbiospecimen\nNaN\n\n\n4\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\nassay\n[\"rnaSeq\"]\n\n\n\n\n\n\n\nWe are only interested in RNAseq data, so we will only read in the individual, biospecimen, and RNAseq assay metadata files. We will also read in the counts data file.\n\n# counts matrix\n\ncounts = pd.read_table(\"files/htseqcounts_5XFAD.txt\")\n\nA note on file versions!\nAll files in the AD Portal are versioned, meaning that if the file represented by a particular synID changes, a new version will be created. You can access a specific versions by using the version argument in synGet(). This will come in handy here, because the Jax.IU.Pitt_5XFAD study recently made some changes to their individual metadata file that included an inadvertent error. While our curators sort out that error, we will use a a previous version of this file (version 3) to ensure that our metadata joins properly. More info on versions in the AD Portal and the Synapse platform can be found here.\n\n# use the \"version\" parameter to get a previous version of this file\n# the \"ifcollision\" parameter lets us specify what synapser should do if an entity already exists locally -- in this case we want to overwrite the previous version downloaded during our bulk download\nind_meta_object = syn.get(entity = 'syn22103212', \n                          version=3, \n                          downloadLocation = \"files/\",\n                          ifcollision = \"overwrite.local\")\n# we can check the entity properties to see what version number it is, and if it is the latest version\nind_meta_object.properties              \n\n{'name': 'Jax.IU.Pitt_5XFAD_individual_metadata.csv',\n 'id': 'syn22103212',\n 'etag': '00000000-0000-0000-0000-000000000000',\n 'createdOn': '2020-05-28T17:36:32.156Z',\n 'modifiedOn': '2023-05-19T20:43:19.787Z',\n 'createdBy': '3346982',\n 'modifiedBy': '3427512',\n 'parentId': 'syn21983022',\n 'concreteType': 'org.sagebionetworks.repo.model.FileEntity',\n 'versionNumber': 3,\n 'versionLabel': '3',\n 'isLatestVersion': False,\n 'dataFileHandleId': '87202568'}\n\n\nWe can now read the metadata csv files in as pandas dataframes.\n\n# individual metadata\n\nind_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\")\n\n# biospecimen metadata\n\nbio_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv\")\n\n#assay metadata\n\nrna_meta = pd.read_csv(\"files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\")\n\nLet’s examine the data and metadata files a bit before we begin our analyses.\n\nCounts data\n\ncounts.head()\n\n\n\n\n\n\n\n\ngene_id\n32043rh\n32044rh\n32046rh\n32047rh\n32048rh\n32049rh\n32050rh\n32052rh\n32053rh\n...\n46887rh\n46888rh\n46889rh\n46890rh\n46891rh\n46892rh\n46893rh\n46895rh\n46896rh\n46897rh\n\n\n\n\n0\nENSG00000080815\n22554\n0\n0\n0\n16700\n0\n0\n19748\n14023\n...\n16072\n0\n16680\n13367\n0\n25119\n92\n0\n15934\n0\n\n\n1\nENSG00000142192\n344489\n4\n0\n1\n260935\n6\n8\n337456\n206851\n...\n258061\n0\n235530\n196721\n0\n371037\n1116\n0\n235343\n6\n\n\n2\nENSMUSG00000000001\n5061\n3483\n3941\n3088\n2756\n3067\n2711\n3334\n3841\n...\n3719\n3899\n4173\n4008\n3037\n5967\n3459\n4262\n3923\n3486\n\n\n3\nENSMUSG00000000003\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\nENSMUSG00000000028\n208\n162\n138\n127\n95\n154\n165\n124\n103\n...\n128\n210\n127\n156\n116\n260\n161\n189\n179\n117\n\n\n\n\n5 rows × 73 columns\n\n\n\nThe data file has a column of ENSEMBL gene ids and then a bunch of columns with count data, where the column headers correspond to the specimenIDs. These specimenIDs should all be in the RNAseq assay metadata file, so let’s check.\n\nrna_meta.head()\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\nrunType\nreadLength\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n1\n32044rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n2\n32046rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n3\n32047rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n4\n32049rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\npairedEnd\n101\n\n\n\n\n\n\n\n\n# check that column headers in counts file match specimenIDs in assay metadata\n\ncol_names = list(counts.columns.values)[1:]\n\nspec_ids = list(rna_meta.specimenID)\n\nall(item in col_names for item in spec_ids)\n\nTrue\n\n\n\n\nAssay metadata\nThe assay metadata contains information about how data was generated on each sample in the assay. Each specimenID represents a unique sample. We can use some tools from pandas to explore the metadata.\n\n# how many unique specimens were sequenced?\n\nrna_meta['specimenID'].nunique()\n\n72\n\n\n\n# were the samples all sequenced on the same platform, and in the same\n# sequencing batch?\n\nrna_meta[['platform', 'sequencingBatch']].nunique()\n\nplatform           1\nsequencingBatch    1\ndtype: int64\n\n\n\n\nBiospecimen metadata\nThe biospecimen metadata contains specimen-level information, including organ and tissue the specimen was taken from, how it was prepared, etc. Each specimenID is mapped to an individualID.\n\n# all specimens from the RNAseq assay metadata file should be in the biospecimen\n# file\n\nrna_meta['specimenID'].isin(bio_meta['specimenID']).value_counts()\n\nTrue    72\nName: specimenID, dtype: int64\n\n\n\n# but the biospecimen file also contains specimens from different assays\n\nbio_meta['specimenID'].isin(rna_meta['specimenID']).value_counts()\n\nFalse    502\nTrue      72\nName: specimenID, dtype: int64\n\n\n\n\nIndividual metadata\nThe individual metadata contains information about all the individuals in the study, represented by unique individualIDs. For humans, this includes information on age, sex, race, diagnosis, etc. For MODEL-AD mouse models, the individual metadata has information on model genotypes, stock numbers, diet, and more.\n\n# all individualIDs in the biospecimen file should be in the individual file\n\nbio_meta['individualID'].isin(ind_meta['individualID']).value_counts()\n\n# which model genotypes are in this study?\n\nind_meta['genotype'].unique()\n\narray(['5XFAD_carrier', '5XFAD_noncarrier'], dtype=object)\n\n\n\n\nJoining metadata\nWe use the three-file structure for our metadata because it allows us to store metadata for each study in a tidy format. Every line in the assay and biospecimen files represents a unique specimen, and every line in the individual file represents a unique individual. This means the files can be easily joined by specimenID and individualID to get all levels of metadata that apply to a particular data file. We will use the merge() function from pandas, with the how = \"left\" option to specify a left join.\n\n# join all the rows in the assay metadata that have a match in the biospecimen\n# metadata, then join all the rows in that dataframe to all rows that have a\n# match in the individual metadata\n\njoined_meta = rna_meta.merge(bio_meta, how = \"left\", on = \"specimenID\").merge(ind_meta, how = \"left\", on = \"individualID\")\n\njoined_meta\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\n...\nGeneration\nAnimalMatingStatus\nComments\njobNumber\nMicrochip Number\nDiet\nBirth ID\nbrainWeight\nanimalWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n1\n32044rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289822454.0\n6%\nNaN\n0.482\n46.51\n5XFAD\n\n\n2\n32046rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289859181.0\n6%\nNaN\n0.470\n41.00\n5XFAD\n\n\n3\n32047rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289777416.0\n6%\nNaN\n0.454\n42.89\n5XFAD\n\n\n4\n32049rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX 5xFAD 12mo\n288770010.0\n6%\nNaN\n0.489\n29.96\n5XFAD\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n67\n46886rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.433\n24.23\n5XFAD\n\n\n68\n46889rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.452\n30.94\n5XFAD\n\n\n69\n46890rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.424\n32.50\n5XFAD\n\n\n70\n46892rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.491\n30.54\n5XFAD\n\n\n71\n46896rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.499\n28.78\n5XFAD\n\n\n\n\n72 rows × 56 columns\n\n\n\nWe now have a very wide dataframe that contains all the available metadata on each specimen in the RNAseq data from this study. This procedure can be used to join the three types of metadata files for every study in the AD Knowledge Portal, allowing you to filter individuals and specimens as needed based on your analysis criteria!\n\n\n\nSingle-specimen files\nFor files that contain data from a single specimen (e.g. raw sequencing files, raw mass spectra, etc.), we can use the Synapse annotations to associate these files with the appropriate metadata.\n\nExcercise 3: Use Explore Data to find all RNAseq files from the Jax.IU.Pitt_5XFAD study.\nIf we filter for data where Study = “Jax.IU.Pitt_5XFAD” and Assay = “rnaSeq” we will get a list of 148 files, including raw fastqs and processed counts data.\n\n\nSynapse entity annotations\nWe can use the function syn.get_annotations() to view the annotations associated with any file without downloading the file.\n\n# the synID of a random fastq file from our filtered search of fastq files\n\nrandom_fastq = \"syn22108503\"\n\n# extract the annotations as a dict\n\nfastq_annotations = syn.get_annotations(random_fastq)\n\nfastq_annotations\n\n{'sex': ['female'],\n 'room': ['JAX_MGL373'],\n 'assay': ['rnaSeq'],\n 'grant': ['U54AG054345'],\n 'organ': ['brain'],\n 'study': ['Jax.IU.Pitt_5XFAD'],\n 'tissue': ['right cerebral hemisphere'],\n 'bedding': ['aspen'],\n 'birthID': ['RMO1223'],\n 'climbID': ['298456'],\n 'species': ['Mouse'],\n 'waterpH': [2.85],\n 'ageDeath': [10.8196721311475],\n 'dataType': ['geneExpression'],\n 'genotype': ['5XFAD_carrier'],\n 'matingID': ['M-108-17'],\n 'dateBirth': ['1521417600000'],\n 'consortium': ['MODEL-AD'],\n 'fileFormat': ['fastq'],\n 'generation': ['N1F3'],\n 'rodentDiet': ['0.06'],\n 'specimenID': ['32043rh'],\n 'brainWeight': [0.503],\n 'dataSubtype': ['raw'],\n 'microchipID': ['288646853'],\n 'stockNumber': ['8730'],\n 'individualID': ['32043'],\n 'officialName': ['B6.Cg-Tg(APPSwFlLon,PSEN1*M146L*L286V)6799Vas/Mmjax'],\n 'resourceType': ['experimentalData'],\n 'rodentWeight': [28.76],\n 'ageDeathUnits': ['months'],\n 'isModelSystem': [False],\n 'materialOrigin': ['JAX'],\n 'isMultiSpecimen': [False],\n 'modelSystemName': ['5XFAD'],\n 'modelSystemType': ['animal'],\n 'nucleicAcidSource': ['bulk cell'],\n 'genotypeBackground': ['C57BL6J'],\n 'individualIdSource': ['JAX'],\n 'individualCommonGenotype': ['5XFAD']}\n\n\nThe file annotations let us see which study the file is associated with (Jax.IU.Pitt.5XFAD), which species it’s from (Mouse), which assay generated the file (rnaSeq), and a whole bunch of other properties. Most importantly, single-specimen files are annotated with with the specimenID of the specimen in the file, and the individualID of the individual that specimen was taken from. We can use these annotations to link files to the rest of the metadata, including metadata that is not in annotations. This is especially helpful for human studies, as potentially identifying information like age, race, and diagnosis is not included in file annotations.\n\n# find records belonging to the individual this file maps to in our joined\n# metadata the annotation value is a string but the individualID column in the\n# metadat is type int so we have to convert\n\njoined_meta[(joined_meta['individualID'] == int(fastq_annotations['individualID'][0]))]\n\n\n\n\n\n\n\n\nspecimenID\nplatform\nRIN\nrnaBatch\nlibraryBatch\nsequencingBatch\nlibraryPrep\nlibraryPreparationMethod\nisStranded\nreadStrandOrigin\n...\nGeneration\nAnimalMatingStatus\nComments\njobNumber\nMicrochip Number\nDiet\nBirth ID\nbrainWeight\nanimalWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\nIlluminaNovaseq6000\nNaN\n1\n1\n1\npolyAselection\nNaN\nfalse\nNaN\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n\n\n1 rows × 56 columns\n\n\n\n\n\nAnnotations during bulk download\nWhen bulk downloading many files, the best practice is to preserve the download manifest that is generated which lists all the files, their synIDs, and all their annotations. If using the Synapse R client, follow the instructions in the Bulk download files section above.\nIf we use the “Programmatic Options” tab in the AD Portal download menu to download all 148 rnaSeq files from the 5XFAD study, we would get a table query that looks like this:\n\nquery = syn.tableQuery(\"SELECT * FROM syn11346063.37 WHERE ( ( \\\"study\\\" HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( \\\"assay\\\" HAS ( 'rnaSeq' ) ) )\")\n\nAs we saw previously, this downloads a csv file with the results of our AD Portal query. Opening that file lets us see which specimens are associated with which files:\n\nannotations_table = pd.read_csv(query.filepath)\n\nannotations_table\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\ncurrentVersion\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\n\n\n\n\n0\n22108503\n1\n458ff182-d2e4-4c11-a8c0-137ea8d4a816\nsyn22108503\n32043_GT19_12829_CCGCGGTT-AGCGCTAG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772363992\n3420438\n75357319\nNaN\nNaN\nanimal\nNaN\n\n\n1\n22108508\n1\n163d5067-924a-422d-ba92-e4d879a5f39e\nsyn22108508\n32044_GT19_12856_GGAGCGTC-GTCCGTGC_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772364039\n3420438\n75357320\nNaN\nNaN\nanimal\nNaN\n\n\n2\n22108512\n1\nd02e16c5-78b6-42d1-9f38-a372b99159b6\nsyn22108512\n32046_GT19_12865_CAACAATG-CTTCACGG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772364086\n3420438\n75357321\nNaN\nNaN\nanimal\nNaN\n\n\n3\n22108519\n1\n59eba082-82ed-4dd5-8aff-f07e0a57938e\nsyn22108519\n32047_GT19_12836_ATGAGGCC-GTTAATTG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772364132\n3420438\n75357323\nNaN\nNaN\nanimal\nNaN\n\n\n4\n22108525\n1\n9fed0677-e8c3-4caf-8dac-72f171e2f30e\nsyn22108525\n32049_GT19_12881_GCCACAGG-CATGCCAT_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772364177\n3420438\n75357322\nNaN\nNaN\nanimal\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n143\n22108846\n1\n4768dbae-386d-4b97-ad45-45ac9e7434a8\nsyn22108846\n46896_GT19_12890_CATAGAGT-TGCCACCA_R2_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772370763\n3420438\n75357566\nNaN\nNaN\nanimal\nNaN\n\n\n144\n22108847\n2\nfae06229-c328-442b-8201-d24368b0c205\nsyn22108847\nhtseqcounts_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n2\nsyn2580853\nsyn2580853\n1634772370808\n3420438\n75357567\nNaN\nNaN\nanimal\nNaN\n\n\n145\n22108848\n2\n2f9f71ea-a0dc-496a-8250-78e98c789097\nsyn22108848\ntpm_gene_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n2\nsyn2580853\nsyn2580853\n1634772370859\n3420438\n75357570\nNaN\nNaN\nanimal\nNaN\n\n\n146\n22108849\n2\nccede801-ca92-4212-86e1-4182928f3a98\nsyn22108849\ntpm_isoform_5XFAD.txt\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n2\nsyn2580853\nsyn2580853\n1634772370911\n3420438\n75357576\nNaN\nNaN\nanimal\nNaN\n\n\n147\n22110328\n4\n20cf3097-4cb0-4507-9e59-1087c3c9ab71\nsyn22110328\nJax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nNaN\nNaN\n...\n4\nsyn2580853\nsyn2580853\n1634772370968\n3420438\n75357585\nNaN\nNaN\nanimal\nNaN\n\n\n\n\n148 rows × 45 columns\n\n\n\nYou could then use a for loop as we did in the Bulk download files example to loop through the column of synIDs and download all 148 files.\nOnce you’ve downloaded all the files in the id column, you can link those files to their annotations by the name column. We’ll demonstrate this using the “random fastq” file that we got the annotations from earlier. To avoid downloading the whole 3GB file, we’ll use syn.get() with downloadFile = False to get only the Synapse entity object rather than the file.\n\nfastq = syn.get(random_fastq, downloadFile = False)\n\n# filter the annotations table to rows that match the fastq filename\n\nannotations_table[(annotations_table['name'] == fastq.properties.name)]\n\n\n\n\n\n\n\n\nROW_ID\nROW_VERSION\nROW_ETAG\nid\nname\nstudy\ndataType\nassay\norgan\ntissue\n...\ncurrentVersion\nbenefactorId\nprojectId\nmodifiedOn\nmodifiedBy\ndataFileHandleId\nmetaboliteType\nchromosome\nmodelSystemType\nlibraryPrep\n\n\n\n\n0\n22108503\n1\n458ff182-d2e4-4c11-a8c0-137ea8d4a816\nsyn22108503\n32043_GT19_12829_CCGCGGTT-AGCGCTAG_R1_001.fast...\n[\"Jax.IU.Pitt_5XFAD\"]\n[\"geneExpression\"]\n[\"rnaSeq\"]\nbrain\n[\"right cerebral hemisphere\"]\n...\n1\nsyn2580853\nsyn2580853\n1634772363992\n3420438\n75357319\nNaN\nNaN\nanimal\nNaN\n\n\n\n\n1 rows × 45 columns\n\n\n\n\n\n\nMultispecimen files\nMultispecimen files in the AD Knowledge Portal are files that contain data or information from more than one specimen. They are not annotated with individualIDs or specimenIDs, since these files may contain numbers of specimens that exceed the annotation limits. These files are usually processed or summary data (gene counts, peptide quantifications, etc), and are always annotated with isMultiSpecimen = TRUE.\nIf we look at the processed and normalized data files in the table of 5XFAD RNAseq file annotations we just downloaded , we will see that it isMultiSpecimen = TRUE, but individualID and specimenID are blank:\n\nannotations_table[(annotations_table['dataSubtype'].isin(['processed', 'normalized']))][['name','individualID', 'specimenID', 'isMultiSpecimen', 'dataSubtype']]\n\n\n\n\n\n\n\n\nname\nindividualID\nspecimenID\nisMultiSpecimen\ndataSubtype\n\n\n\n\n144\nhtseqcounts_5XFAD.txt\nNaN\nNaN\nTrue\nprocessed\n\n\n145\ntpm_gene_5XFAD.txt\nNaN\nNaN\nTrue\nnormalized\n\n\n146\ntpm_isoform_5XFAD.txt\nNaN\nNaN\nTrue\nnormalized\n\n\n\n\n\n\n\nThe multispecimen file should contain a row or column of specimenIDs that correspond to the specimenIDs used in a study’s metadata, as we have seen with the 5XFAD counts file.\n\n# In this example, we take a slice of the counts data to reduce computation,\n# transpose it so that each row represents a single specimen, and then join it\n# to the joined metadata by the specimenID\n\n# transpose\n\nsmall_counts = counts.head()\ntransposed = small_counts.transpose()\n\n# make geneIDs column headers\n\ntransposed = transposed.rename(columns = transposed.iloc[0]).drop(transposed.index[0])\n\n# make rownames into a column of specimenIDs\n\ntransposed.index.name = 'specimenID'\ntransposed = transposed.reset_index()\n\n# join to metadata\n\ntransposed.merge(joined_meta, how = 'left', on = 'specimenID')\n\n\n\n\n\n\n\n\nspecimenID\nENSG00000080815\nENSG00000142192\nENSMUSG00000000001\nENSMUSG00000000003\nENSMUSG00000000028\nplatform\nRIN\nrnaBatch\nlibraryBatch\n...\nGeneration\nAnimalMatingStatus\nComments\njobNumber\nMicrochip Number\nDiet\nBirth ID\nbrainWeight\nanimalWeight\nmodelCommonName\n\n\n\n\n0\n32043rh\n22554\n344489\n5061\n0\n208\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n288646853.0\n6%\nNaN\n0.503\n28.76\n5XFAD\n\n\n1\n32044rh\n0\n4\n3483\n0\n162\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289822454.0\n6%\nNaN\n0.482\n46.51\n5XFAD\n\n\n2\n32046rh\n0\n0\n3941\n0\n138\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289859181.0\n6%\nNaN\n0.470\n41.00\n5XFAD\n\n\n3\n32047rh\n0\n1\n3088\n0\n127\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F3\nVirgin\nNaN\nJAX 5xFAD 12mo\n289777416.0\n6%\nNaN\n0.454\n42.89\n5XFAD\n\n\n4\n32048rh\n16700\n260935\n2756\n0\n95\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX 5xFAD 12mo\n288855717.0\n6%\nNaN\n0.447\n25.57\n5XFAD\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n67\n46892rh\n25119\n371037\n5967\n0\n260\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 6month\nNaN\n6%\nNaN\n0.491\n30.54\n5XFAD\n\n\n68\n46893rh\n92\n1116\n3459\n0\n161\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.537\n25.37\n5XFAD\n\n\n69\n46895rh\n0\n0\n4262\n0\n189\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.501\n30.52\n5XFAD\n\n\n70\n46896rh\n15934\n235343\n3923\n0\n179\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.499\n28.78\n5XFAD\n\n\n71\n46897rh\n0\n6\n3486\n0\n117\nIlluminaNovaseq6000\nNaN\n1\n1\n...\nN1F4\nVirgin\nNaN\nJAX DMP 5xFAD 4month\nNaN\n6%\nNaN\n0.514\n35.80\n5XFAD\n\n\n\n\n72 rows × 61 columns\n\n\n\nYou could now begin to compare counts of different genes across specimens from this study, perhaps grouping by sex, genotype, or age."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#setup",
    "href": "5XFAD_data_R_tutorial.html#setup",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Setup",
    "text": "Setup\n\nInstall and load packages\nIf you haven’t already, install synapser (the Synapse R client), as well as the tidyverse family of packages.\n\n# install synapser\ninstall.packages(\"synapser\", repos = c(\"http://ran.synapse.org\"))\n\n# install tidyverse if you don't already have it\ninstall.packages(\"dplyr\", \"purrr\", \"readr\", \"lubridate\", \"stringr\", \"tibble\")\n\nLoad libraries\n\nlibrary(synapser)\n\nWarning: package 'synapser' was built under R version 4.2.3\n\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(tibble)\n\n\n\nLogin to Synapse\nNext, you will need to log in to your Synapse account.\n\nLogin option 1: Synapser takes credentials from your Synapse web session\nIf you are logged into the Synapse web browser, synapser will automatically use your login credentials to log you in during your R session! All you have to do is:\n\n\nLogin option 2: Synapse PAT\nFollow these instructions to generate a Personal Access Token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n\nsynLogin(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapser, see the documentation here."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#download-data",
    "href": "5XFAD_data_R_tutorial.html#download-data",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Download data",
    "text": "Download data\nWhile you can always download data from the AD Portal website via your web browser, it’s usually faster and often more convenient to download data programmatically.\n\nDownload a single file\nTo download a single file from the AD Knowledge Portal, you can click the linked file name to go to a page in the Synapse platform where that file is stored. Using the synID on that page, you can call the synGet() function from synapser to download the file.\n\nExercise 1: Use Explore Data to find processed RNAseq data from the Jax.IU.Pitt_5XFAD Study\nThis filters the table to a single file. In the “Id” column for this htseqcounts_5XFAD.txt file, there is a unique Synapse ID (synID).\n\nWe can then use that synID to download the file. Some system about the file and its storage location within Synapse is printed to the R console when we call synGet.\n\ncounts_id &lt;- \"syn22108847\"\nsynGet(counts_id, downloadLocation = \"files/\")\n\n\n\n\nBulk download files\n\nExercise 2: Use Explore Studies to find all metadata files from the Jax.IU.Pitt_5XFAD study\nUse the facets and search bar to look for data you want to download from the AD Knowledge Portal. Once you’ve identified the files you want, click on the download arrow icon on the top right of the Explore Data table and select “Programmatic Options” from the drop-down menu.\n\nIn the window that pops up, select the “R” tab from the top menu bar. This will display some R code that constructs a SQL query of the Synapse data table that drives the AD Knowledge Portal. This query will allow us to download only the files that meet our search criteria.\n\nThe function synTableQuery() returns a Synapse object wrapper around a CSV file that is automatically downloaded to a Synapse cache directory .synapseCache in your home directory. You can use query$filepath to see the path to the file in the Synapse cache.\n\n# download the results of the filtered table query\nquery &lt;- synTableQuery(\"SELECT * FROM syn11346063.37 WHERE ( ( `study` HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( `resourceType` = 'metadata' ) )\")\n\n# view the file path of the resulting csv\nquery$filepath\n\n[1] \"/Users/alinden/.synapseCache/508/135886508/SYNAPSE_TABLE_QUERY_135886508.csv\"\n\n\nWe’ll use read_csv (from the readr package) to read the CSV file into R (although the provided read.table or any other base R version is also fine!). We can explore the download_table object and see that it contains information on all of the AD Portal data files we want to download. Some columns like the “id” and “parentId” columns contain info about where the file is in Synapse, and some columns contain AD Portal annotations for each file, like “dataType”, “specimenID”, and “assay”. This annotation table will later allow us to link downloaded files to additional metadata variables!\n\n# read in the table query csv file\ndownload_table &lt;- read_csv(query$filepath, show_col_types = FALSE)\n\ndownload_table\n\n\n\n  \n\n\n\nFinally, we use a mapping function from the purrr package to loop through the “id” column and apply the synGet() function to each file’s synID. In this case, we use purrr::walk() because it lets us call synGet() for its side effect (downloading files to a location we specify), and returns nothing.\n\n# loop through the column of synIDs and download each file\npurrr::walk(download_table$id, ~synGet(.x, downloadLocation = \"files/\"))\n\nCongratulations, you have bulk downloaded files from the AD Knowledge Portal!\nAn important note: for situations where you are downloading many large files, the R client performs substantially slower than the command line client or the Python client. In these cases, you can use the instructions and code snippets for the command line or Python client provided in the “Programmatic Options” menu."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#working-with-ad-portal-metadata",
    "href": "5XFAD_data_R_tutorial.html#working-with-ad-portal-metadata",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "Working with AD Portal metadata",
    "text": "Working with AD Portal metadata\n\nMetadata basics\nWe have now downloaded several metadata files and an RNAseq counts file from the portal. For our next exercises, we want to read those files in as R data so we can work with them.\nWe can see from the download_table we got during the bulk download step that we have five metadata files. Two of these should be the individual and biospecimen files, and three of them are assay meetadata files.\n\n#\ndownload_table |&gt; \n  dplyr::select(name, metadataType, assay)\n\n\n\n  \n\n\n\nWe are only interested in RNAseq data, so we will only read in the individual, biospecimen, and RNAseq assay metadata files.\n\nA note on file versions!\nAll files in the AD Portal are versioned, meaning that if the file represented by a particular synID changes, a new version will be created. You can access a specific versions by using the version argument in synGet(). This will come in handy here, because the Jax.IU.Pitt_5XFAD study recently made some changes to their individual metadata file that included an inadvertent error. While our curators sort out that error, we will use a a previous version of this file (version 3) to ensure that our metadata joins properly. More info on versions in the AD Portal and the Synapse platform can be found here.\n\n# use the \"version\" parameter to get a previous version of this file\n# the \"ifcollision\" parameter lets us specify what synapser should do if an entity already exists locally -- in this case we want to overwrite the previous version downloaded during our bulk download\nind_meta_object &lt;- synGet(entity = 'syn22103212', \n                          version=3, \n                          downloadLocation = \"files/\",\n                          ifcollision = \"overwrite.local\")\n\n# we can check the version to see what number it is, and if it is the latest version\nind_meta_object$properties$versionNumber\n\n[1] 3\n\nind_meta_object$properties$isLatestVersion\n\n[1] FALSE\n\n\nNow we can read all the metadata files in to R as data frames.\n\n#individual metadata\nind_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\", show_col_types = FALSE)\n\n# biospecimen metadata\nbio_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv\", show_col_types = FALSE)\n\n#assay metadata\nrna_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\", show_col_types = FALSE)\n\nLet’s examine the data and metadata files a bit before we begin our analyses.\n\n\nCounts data\n\n# counts matrix\ncounts &lt;- read_tsv(\"files/htseqcounts_5XFAD.txt\", show_col_types = FALSE)\n\n\n# Calling a tibble object will print the first ten rows in a nice tidy output; doing the same for a base R dataframe will print the whole thing until it runs out of memory. If you want to inspect a large dataframe, use `head(df)`\nhead(counts)\n\n\n\n  \n\n\n\nThe counts data file has a column of ENSEMBL gene ids and then a bunch of columns with count data, where the column headers correspond to the specimenIDs. These specimenIDs should all be in the RNAseq assay metadata file, so let’s check.\n\n# what does the RNAseq assay metadata look like?\nhead(rna_meta)\n\n\n\n  \n\n\n\n\n# are all the column headers from the counts matrix (except the first \"gene_id\" column) in the assay metadata?\nall(colnames(counts[-1]) %in% rna_meta$specimenID)\n\n[1] TRUE\n\n\n\n\nAssay metadata\nThe assay metadata contains information about how data was generated on each sample in the assay. Each specimenID represents a unique sample. We can use some tools from dplyr to explore the metadata.\n\n# how many unique specimens were sequenced?\nn_distinct(rna_meta$specimenID)\n\n[1] 72\n\n\n\n# were the samples all sequenced on the same platform?\ndistinct(rna_meta, platform)\n\n\n\n  \n\n\n\n\n# were there multiple sequencing batches reported?\ndistinct(rna_meta, sequencingBatch) \n\n\n\n  \n\n\n\n\n\nBiospecimen metadata\nThe biospecimen metadata contains specimen-level information, including organ and tissue the specimen was taken from, how it was prepared, etc. Each specimenID is mapped to an individualID.\n\n# all specimens from the RNAseq assay metadata file should be in the biospecimen file\nall(rna_meta$specimenID %in% bio_meta$specimenID)\n\n[1] TRUE\n\n\n\n# but the biospecimen file also contains specimens from different assays\nall(bio_meta$specimenID %in% rna_meta$specimenID)\n\n[1] FALSE\n\n\n\n\nIndividual metadata\nThe individual metadata contains information about all the individuals in the study, represented by unique individualIDs. For humans, this includes information on age, sex, race, diagnosis, etc. For MODEL-AD mouse models, the individual metadata has information on model genotypes, stock numbers, diet, and more.\n\n# all individualIDs in the biospecimen file should be in the individual file\nall(bio_meta$individualID %in% ind_meta$individualID)\n\n[1] TRUE\n\n\n\n# which model genotypes are in this study?\ndistinct(ind_meta, genotype)\n\n\n\n  \n\n\n\n\n\nJoining metadata\nWe use the three-file structure for our metadata because it allows us to store metadata for each study in a tidy format. Every line in the assay and biospecimen files represents a unique specimen, and every line in the individual file represents a unique individual. This means the files can be easily joined by specimenID and individualID to get all levels of metadata that apply to a particular data file. We will use the left_join() function from the dplyr package, and the base R pipe operator |&gt;. If you are unfamiliar with the pipe, think of it as a shorthand for “take this (the preceding object) and do that (the subsequent command)”. See here for more info on piping in R.\n\n# join all the rows in the assay metadata that have a match in the biospecimen metadata\njoined_meta &lt;- rna_meta |&gt; #start with the rnaseq assay metadata\n  left_join(bio_meta, by = \"specimenID\") |&gt;  #join rows from biospecimen that match specimenID \n  left_join(ind_meta, by = \"individualID\") # join rows from individual that match individualID\n\njoined_meta\n\n\n\n  \n\n\n\nWe now have a very wide dataframe that contains all the available metadata on each specimen in the RNAseq data from this study. This procedure can be used to join the three types of metadata files for every study in the AD Knowledge Portal, allowing you to filter individuals and specimens as needed based on your analysis criteria!\n\n\n\nSingle-specimen files\nFor files that contain data from a single specimen (e.g. raw sequencing files, raw mass spectra, etc.), we can use the Synapse annotations to associate these files with the appropriate metadata.\n\nExcercise 3: Use Explore Data to find all RNAseq files from the Jax.IU.Pitt_5XFAD study.\nIf we filter for data where Study = “Jax.IU.Pitt_5XFAD” and Assay = “rnaSeq” we will get a list of 148 files, including raw fastqs and processed counts data.\n\n\nSynapse entity annotations\nWe can use the function synGetAnnotations to view the annotations associated with any file without downloading the file.\n\n# the synID of a random fastq file from this list\nrandom_fastq &lt;- \"syn22108503\"\n\n# extract the annotations as a nested list\nfastq_annotations &lt;- synGetAnnotations(random_fastq)\n\nfastq_annotations\n\n$sex\n[1] \"female\"\n\n$room\n[1] \"JAX_MGL373\"\n\n$assay\n[1] \"rnaSeq\"\n\n$grant\n[1] \"U54AG054345\"\n\n$organ\n[1] \"brain\"\n\n$study\n[1] \"Jax.IU.Pitt_5XFAD\"\n\n$tissue\n[1] \"right cerebral hemisphere\"\n\n$bedding\n[1] \"aspen\"\n\n$birthID\n[1] \"RMO1223\"\n\n$climbID\n[1] \"298456\"\n\n$species\n[1] \"Mouse\"\n\n$waterpH\n[1] 2.85\n\n$ageDeath\n[1] 10.81967\n\n$dataType\n[1] \"geneExpression\"\n\n$genotype\n[1] \"5XFAD_carrier\"\n\n$matingID\n[1] \"M-108-17\"\n\n$dateBirth\n[1] \"1521417600000\"\n\n$consortium\n[1] \"MODEL-AD\"\n\n$fileFormat\n[1] \"fastq\"\n\n$generation\n[1] \"N1F3\"\n\n$rodentDiet\n[1] \"0.06\"\n\n$specimenID\n[1] \"32043rh\"\n\n$brainWeight\n[1] 0.503\n\n$dataSubtype\n[1] \"raw\"\n\n$microchipID\n[1] \"288646853\"\n\n$stockNumber\n[1] \"8730\"\n\n$individualID\n[1] \"32043\"\n\n$officialName\n[1] \"B6.Cg-Tg(APPSwFlLon,PSEN1*M146L*L286V)6799Vas/Mmjax\"\n\n$resourceType\n[1] \"experimentalData\"\n\n$rodentWeight\n[1] 28.76\n\n$ageDeathUnits\n[1] \"months\"\n\n$isModelSystem\n[1] FALSE\n\n$materialOrigin\n[1] \"JAX\"\n\n$isMultiSpecimen\n[1] FALSE\n\n$modelSystemName\n[1] \"5XFAD\"\n\n$modelSystemType\n[1] \"animal\"\n\n$nucleicAcidSource\n[1] \"bulk cell\"\n\n$genotypeBackground\n[1] \"C57BL6J\"\n\n$individualIdSource\n[1] \"JAX\"\n\n$individualCommonGenotype\n[1] \"5XFAD\"\n\n\nThe file annotations let us see which study the file is associated with (Jax.IU.Pitt.5XFAD), which species it’s from (Mouse), which assay generated the file (rnaSeq), and a whole bunch of other properties. Most importantly, single-specimen files are annotated with with the specimenID of the specimen in the file, and the individualID of the individual that specimen was taken from. We can use these annotations to link files to the rest of the metadata, including metadata that is not in annotations. This is especially helpful for human studies, as potentially identifying information like age, race, and diagnosis is not included in file annotations.\n\n# find records belonging to the individual this file maps to in our joined metadata\njoined_meta |&gt; \n  filter(individualID == fastq_annotations$individualID[[1]])\n\n\n\n  \n\n\n\n\n\nAnnotations during bulk download\nWhen bulk downloading many files, the best practice is to preserve the download manifest that is generated which lists all the files, their synIDs, and all their annotations. If using the Synapse R client, follow the instructions in the Bulk download files section above.\nIf we use the “Programmatic Options” tab in the AD Portal download menu to download all 148 rnaSeq files from the 5XFAD study, we would get a table query that looks like this:\n\nquery &lt;- synTableQuery(\"SELECT * FROM syn11346063.37 WHERE ( ( \\\"study\\\" HAS ( 'Jax.IU.Pitt_5XFAD' ) ) AND ( \\\"assay\\\" HAS ( 'rnaSeq' ) ) )\")\n\nAs we saw previously, this downloads a csv file with the results of our AD Portal query. Opening that file lets us see which specimens are associated with which files:\n\n#\nannotations_table &lt;- read_csv(query$filepath, show_col_types = FALSE)\n\nannotations_table\n\n\n\n  \n\n\n\nYou could then use purrr::walk(download_table$id, ~synGet(.x, downloadLocation = &lt;your-download-directory&gt;)) to walk through the column of synIDs and download all 148 files. However, because these are large files, it might be preferable to use the Python client or command line client for increased speed.\nOnce you’ve downloaded all the files in the id column, you can link those files to their annotations by the name column.\n\n# We'll use the \"random fastq\" that we got annotations for earlier\n# To avoid downloading the whole 3GB file, we'll use synGet with \"downloadFile = FALSE\" to get only the Synapse entity information, rather than the file. \n# If we downloaded the actual file, we could find it in the directory and search using the filename. Since we're just downloading the Synapse entity wrapper object, we'll use the file name listed in the object properties.\n\nfastq &lt;- synGet(random_fastq, downloadFile = FALSE)\n\n# filter the annotations table to rows that match the fastq filename\nannotations_table |&gt; \n  filter(name == fastq$properties$name)\n\n\n\n  \n\n\n\n\n\n\nMultispecimen files\nMultispecimen files in the AD Knowledge Portal are files that contain data or information from more than one specimen. They are not annotated with individualIDs or specimenIDs, since these files may contain numbers of specimens that exceed the annotation limits. These files are usually processed or summary data (gene counts, peptide quantifications, etc), and are always annotated with isMultiSpecimen = TRUE.\nIf we look at the processed data files in the table of 5XFAD RNAseq file annotations we just downloaded , we will see that it isMultiSpecimen = TRUE, but individualID and specimenID are blank:\n\n#\nannotations_table |&gt; \n  filter(fileFormat == \"txt\") |&gt; \n  dplyr::select(name, individualID, specimenID, isMultiSpecimen)\n\n\n\n  \n\n\n\nThe multispecimen file should contain a row or column of specimenIDs that correspond to the specimenIDs used in a study’s metadata, as we have seen with the 5XFAD counts file.\n\n# In this example, we take a slice of the counts data to reduce computation, transpose it so that each row represents a single specimen, and then join it to the joined metadata by the specimenID\ncounts |&gt; \n  slice_head(n = 5) |&gt; \n  t() |&gt; \n  as_tibble(rownames = \"specimenID\") |&gt; \n  left_join(joined_meta, by = \"specimenID\")\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`."
  },
  {
    "objectID": "5XFAD_data_R_tutorial.html#rnaseq-data-exploration",
    "href": "5XFAD_data_R_tutorial.html#rnaseq-data-exploration",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in RStudio",
    "section": "RNASeq data exploration",
    "text": "RNASeq data exploration\nWe will use the counts data and metadata to do some basic exploratory analysis of gene expression in the Jax 5XFAD mouse model.\n\nExplore covariates\nWhich covariates from the metadata are we interested in?\n\n# all samples are from the same organ and tissue, so we can probably discard those\ndistinct(joined_meta, organ, tissue, sampleStatus)\n\n\n\n  \n\n\n# we have different sexes and genotypes, so we are probably interested in those\ndistinct(joined_meta, sex, genotype)\n\n\n\n  \n\n\n\nFor this example, we will plot gene expression by sex, genotype, and age.\n\nCreate timepoint column\nThe MODEL-AD individual mouse metadata contains columns with birth date and death date for each mouse. Using the RNASeq methods description from the Jax 5XFAD study page in the AD Portal, we expect this data to have equal numbers of individuals sampled at 4, 6, and 12 month timepoints. We can create a new column that captures this info in our joined metadata.\nNote: MODEL-AD studies added to the portal after June 2021 include an ‘ageDeath’ column that makes this simpler.\n\n# load the lubridate package (comes with tidyverse)\nlibrary(lubridate)\n\n# convert columns of strings to month-date-year format\njoined_meta_time &lt;- joined_meta |&gt; \n  mutate(dateBirth = mdy(dateBirth), dateDeath = mdy(dateDeath)) |&gt; \n  # create a new column that subtracts dateBirth from dateDeath in days, then divide by 30 to get months\n  mutate(timepoint = as.numeric(difftime(dateDeath, dateBirth, units =\"days\"))/30) |&gt; \n  # convert numeric ages to timepoint categories\n  mutate(timepoint = case_when(timepoint &gt; 10 ~ \"12 mo\",\n                               timepoint &lt; 10 & timepoint &gt; 5 ~ \"6 mo\",\n                               timepoint &lt; 5 ~ \"4 mo\"))\n\nWe now have balanced samples across sex, genotype, and age:\n\n# check that the timepoint column looks ok\njoined_meta_time |&gt; \n  group_by(sex, genotype, timepoint) |&gt; \n  count()\n\n\n\n  \n\n\n\n\n\nSubset covariates\nTo reduce the width of the dataframe, we will subset only the columns that contain covariates we’re interested in exploring further. Retaining the individualID and specimenID columns will make sure we can map the covariates to the data and back to the original metadata if needed!\n\n# many packages have a \"select\" function that masks dplyr so we have to specify\ncovars &lt;- joined_meta_time |&gt; \n  dplyr::select(individualID, specimenID, sex, genotype, timepoint)\n\n# check the result\ncovars\n\n\n\n  \n\n\n\n\n\n\nJoin metadata to counts matrix\nReturn to the gene counts matrix we read in earlier.\n\n# check how many gene_ids are NOT from the mouse genome by searching for the string \"MUS\" (as in Mus musculus) in the gene_id column\ncounts |&gt; \n  filter(!str_detect(gene_id, \"MUS\"))\n\n\n\n  \n\n\n\n\nConvert ensembleIDs to common gene names\n\nBiomaRt option:\nOPTIONAL: Transform the ensemblIDs in the matrix to common gene names, using the R package biomaRt (note: must specify to use the mouse database, although the two genes in the 5XFAD model we identified above are humanized and won’t be translated by the program).\nFor this option, use the BioconductoR package manager to install biomaRt.\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"biomaRt\")\n\nlibrary(biomaRt)\n\nThe next two code chunks will not automatically execute in this notebook because they can take a long time – the code is included if you’d like to try this on your own.\nWe will use the two custom functions below to convert ensemblIDs to gene names:\nCall the Make.Gene.Symb() function to add a new column with short gene names to our counts dataframe. This will take a minute – there are over 55k genes in our matrix!\n\n\nPre-translated option:\nFor this demonstration, instead of running biomaRt, which can be unreliable at times and take a long time to render, we will append a dataframe to our counts matrix with short gene names already translated\n\nensembl_to_gene &lt;- read.csv(file=\"ensembl_translation_key.csv\")\nnamed_counts &lt;- dplyr::left_join(counts, ensembl_to_gene, by=\"gene_id\")\n\nAre the gene names unique?\n\n# are all the gene names unique?\nlength(named_counts$gene_name) - n_distinct(named_counts$gene_name) \n\n[1] 71\n\n# 71 duplicate gene names\n\nWe need to clean up the humanized gene names and append unique identifiers to the duplicate names.\n\n#The first two genes in the matrix are the humanized genes PSEN1 (ENSG00000080815) and APP (    ENSG00000142192). Set these manually:\nnamed_counts[1, \"gene_name\"] &lt;- \"PSEN1\"\nnamed_counts[2, \"gene_name\"] &lt;- \"APP\"\n\n#make all gene names unique and remove unneeded column\nnamed_counts &lt;- named_counts |&gt; \n  mutate(gene_name = make.unique(gene_name)) |&gt; \n  dplyr::select(-gene_id) |&gt; \n  column_to_rownames(var = \"gene_name\")\n\n\n\n\nTranspose counts matrix and join to covariates\nNow we can transpose the dataframe so that each row contains count data cross all genes for an individual, and join our covariates by specimenID.\n\n#\ncounts_tposed &lt;- named_counts |&gt; \n  t() |&gt;  #transposing forces the df to a matrix\n  as_tibble(rownames = \"specimenID\") |&gt; #reconvert to tibble and specify rownames\n  left_join(covars, by = \"specimenID\") #join covariates by specimenID\n\n\n# check the transposed matrix looks ok\nhead(counts_tposed)\n\n\n\n  \n\n\n\n\n\n\nVisualize gene count data\nCreate simple box plots showing normalized counts by genotype and time point, faceted by sex.\n\n# first make the timepoints column a factor and re-order the levels\ncounts_tposed$timepoint &lt;- factor(counts_tposed$timepoint, levels=c(\"4 mo\",\"6 mo\",\"12 mo\"))\n\nUse ggplot to plot gene counts for each specimen by age, sex, and genotype.\n\n# load ggplot2\nlibrary(ggplot2)\n\n#Look at APP levels -- this model is the 5X FAD mutant, so we expect it to be high!\ng &lt;- counts_tposed |&gt; \n  ggplot(aes(x=timepoint, y=APP, color=genotype)) +\n    geom_boxplot() + \n    geom_point(position=position_jitterdodge()) +\n    facet_wrap(~sex)\n\ng\n\n\n\n\nExamine any gene of interest by setting the y argument in the ggplot(aes() mapping equal to the gene name. Ex: y = Trem2\n\n#\ng &lt;- counts_tposed |&gt; \n  ggplot(aes(x=timepoint, y=Trem2, color=genotype)) +\n    geom_boxplot() + \n    geom_point(position=position_jitterdodge()) +\n    facet_wrap(~sex)\n\ng\n\n\n\n\nEx: y = Apoe\n\n#\ng &lt;- counts_tposed |&gt; \n  ggplot(aes(x=timepoint, y=Apoe, color=genotype)) +\n    geom_boxplot() + \n    geom_point(position=position_jitterdodge()) +\n    facet_wrap(~sex)\n\ng\n\n\n\n\n---"
  },
  {
    "objectID": "5XFADdata_python_tutorial.html#setup",
    "href": "5XFADdata_python_tutorial.html#setup",
    "title": "AD Knowledge Portal Workshop: Download and explore 5XFAD mouse data in Python",
    "section": "",
    "text": "If you haven’t already, install synapseclient (the Synapse python client package) using pip from the command line.\npip3 install --upgrade synapseclient\nWe will also use the python package pandas for data wrangling. If you don’t have it installed, install from the command line:\npip3 install pandas\nImport the synapseclient and pandas libraries and create a Synapse object.\n\nimport synapseclient\nimport pandas as pd\nsyn = synapseclient.Synapse()\n\n\n\n\nNext, you will need to log in to your Synapse account.\nFollow these instructions to generate a personal access token, then paste the PAT into the code below. Make sure you scope your access token to allow you to View, Download, and Modify.\n\nsyn.login(authToken = \"&lt;paste your personal access token here&gt;\")\n\nFor more information on managing Synapse credentials with synapseclient, see the documentation here. If you have a .synapseCreds file stored in your home directory, you can simply run\n\nsyn.login()"
  },
  {
    "objectID": "Workshop2_DESeq.html",
    "href": "Workshop2_DESeq.html",
    "title": "Differential Analysis of 5xFAD mouse models",
    "section": "",
    "text": "Author: Laura Heath, adapted from code written by Ravi Pandey, Jackson Laboratories\nThe following data is obtained from The Jax.IU.Pitt_5XFAD Study (Jax.IU.Pitt_5XFAD), found here: syn21983020 and here: https://adknowledgeportal.synapse.org/Explore/Studies/DetailsPage/StudyData?Study=syn21983020\nThe following code will take the raw counts matrix you uploaded in the first part of the workshop (Portal_workshop_5xFADdata.Rmd) and the metadata file you created that also contains the specimen IDs to run a basic differential expression analysis on a single time point (12 months) in male mice. You can amend the code to compare wild type and 5XFAD mice from either sex, at any time point.\nWe will need several new packages from Bioconductor to run this analysis\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"DESeq2\", \"org.Mm.eg.db\",\"GO.db\", \"EnhancedVolcano\", \"AnnotationDbi\"))\n#install.packages(c(\"tidyverse\", \"ggplot2\", \"dplyr\"))\n\n\nlibrary(DESeq2)\n\nLoading required package: S4Vectors\n\n\nLoading required package: stats4\n\n\nLoading required package: BiocGenerics\n\n\n\nAttaching package: 'BiocGenerics'\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit, which.max, which.min\n\n\n\nAttaching package: 'S4Vectors'\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\nLoading required package: GenomicRanges\n\n\nLoading required package: GenomeInfoDb\n\n\nLoading required package: SummarizedExperiment\n\n\nLoading required package: MatrixGenerics\n\n\nLoading required package: matrixStats\n\n\n\nAttaching package: 'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\nLoading required package: Biobase\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\nAttaching package: 'Biobase'\n\n\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n\nlibrary(ggplot2)\nlibrary(AnnotationDbi)\nlibrary(org.Mm.eg.db)\n\n\n\nlibrary(GO.db)\n\n\n\nlibrary(EnhancedVolcano)\n\nLoading required package: ggrepel\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.1.8\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::%within%() masks IRanges::%within%()\n✖ dplyr::collapse()     masks IRanges::collapse()\n✖ dplyr::combine()      masks Biobase::combine(), BiocGenerics::combine()\n✖ dplyr::count()        masks matrixStats::count()\n✖ dplyr::desc()         masks IRanges::desc()\n✖ tidyr::expand()       masks S4Vectors::expand()\n✖ dplyr::filter()       masks stats::filter()\n✖ dplyr::first()        masks S4Vectors::first()\n✖ dplyr::lag()          masks stats::lag()\n✖ ggplot2::Position()   masks BiocGenerics::Position(), base::Position()\n✖ purrr::reduce()       masks GenomicRanges::reduce(), IRanges::reduce()\n✖ dplyr::rename()       masks S4Vectors::rename()\n✖ lubridate::second()   masks S4Vectors::second()\n✖ lubridate::second&lt;-() masks S4Vectors::second&lt;-()\n✖ dplyr::select()       masks AnnotationDbi::select()\n✖ dplyr::slice()        masks IRanges::slice()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(synapser)\n\n\nNew synapser version detected:\n    You are using synapser version 1.0.59.\n    synapser version 1.1.0.119 is detected at http://ran.synapse.org.\n    To upgrade to the latest version of synapser, please run the following command:\n    install.packages(\"synapser\", repos=\"http://ran.synapse.org\")\n\n\nTERMS OF USE NOTICE:\n  When using Synapse, remember that the terms and conditions of use require that you:\n  1) Attribute data contributors when discussing these data or results from these data.\n  2) Not discriminate, identify, or recontact individuals or groups represented by the data.\n  3) Use and contribute only data de-identified to HIPAA standards.\n  4) Redistribute data only under these same terms of use.\n\n\nYou can use the original counts matrix you uploaded in the Portal_workshop_5XFADdata.Rmd, along with the subsetted metadata file with covariates of interest (‘covars’)\n\nsynLogin()\n\nNULL\n\ncounts_id &lt;- \"syn22108847\"\nsynGet(counts_id, downloadLocation = \"files/\")\n\nFile(consortium=['MODEL-AD'], dataType=['geneExpression'], isModelSystem=[False], name='htseqcounts_5XFAD.txt', path='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/htseqcounts_5XFAD.txt', tissue=['right cerebral hemisphere'], id='syn22108847', modifiedOn='2023-05-19T20:43:30.219Z', study=['Jax.IU.Pitt_5XFAD'], createdBy='3347528', resourceType=['experimentalData'], versionLabel='2', isLatestVersion=True, cacheDir='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files', modifiedBy='3427512', nucleicAcidSource=['bulk cell'], grant=['U54AG054345'], fileFormat=['txt'], dataFileHandleId='75357567', etag='b73bc1b8-2af8-48ce-a51b-ea6ded5624b5', versionNumber=2, files=['htseqcounts_5XFAD.txt'], createdOn='2020-05-31T02:43:27.937Z', synapseStore=True, isMultiSpecimen=[False], _file_handle={'id': '75357567', 'etag': '409fa46a-4f31-4cf8-8133-e3deb6511437', 'createdBy': '3417412', 'createdOn': '2021-04-26T08:20:13.000Z', 'modifiedOn': '2021-04-26T08:20:13.000Z', 'concreteType': 'org.sagebionetworks.repo.model.file.S3FileHandle', 'contentType': 'text/plain', 'contentMd5': '72e2ed951e541c5ba93a37465f056d7a', 'fileName': 'htseqcounts_5XFAD.txt', 'storageLocationId': 41208, 'contentSize': 12803625, 'status': 'AVAILABLE', 'bucketName': 'ad-knowledge-portal-main', 'key': 'data/3417412/60d0db76-ca8c-458d-91fc-b4b9f9dd470a/htseqcounts_5XFAD.txt', 'previewId': '75357569', 'isPreview': False, 'externalURL': None}, concreteType='org.sagebionetworks.repo.model.FileEntity', parentId='syn22323073', assay=['rnaSeq'], dataSubtype=['processed'], modelSystemType=['animal'], organ=['brain'])\n\ncounts &lt;- read.delim(\"files/htseqcounts_5XFAD.txt\", check.names = FALSE)\nhead(counts)\n\n             gene_id 32043rh 32044rh 32046rh 32047rh 32048rh 32049rh 32050rh\n1    ENSG00000080815   22554       0       0       0   16700       0       0\n2    ENSG00000142192  344489       4       0       1  260935       6       8\n3 ENSMUSG00000000001    5061    3483    3941    3088    2756    3067    2711\n4 ENSMUSG00000000003       0       0       0       0       0       0       0\n5 ENSMUSG00000000028     208     162     138     127      95     154     165\n6 ENSMUSG00000000031      44      17      14      28      23      24      14\n  32052rh 32053rh 32057rh 32059rh 32061rh 32062rh 32065rh 32067rh 32068rh\n1   19748   14023       0   17062       0   15986      10       0   18584\n2  337456  206851       1  264748       0  252248     172       4  300398\n3    3334    3841    4068    3306    4076    3732    3940    4238    3257\n4       0       0       0       0       0       0       0       0       0\n5     124     103     164     116     108     134     204     239     148\n6      30      24      35      41      40      32      34      47      22\n  32070rh 32073rh 32074rh 32075rh 32078rh 32081rh 32088rh 32640rh 46105rh\n1       1       0       0   22783   17029   16626   15573   12721       4\n2       4       2       9  342655  280968  258597  243373  188818      19\n3    3351    3449    4654    4844    3132    3334    3639    3355    4191\n4       0       0       0       0       0       0       0       0       0\n5     159     167     157     211     162     149     160     103     158\n6      52      21      13      58      18      35      19      43     103\n  46106rh 46107rh 46108rh 46109rh 46110rh 46111rh 46112rh 46113rh 46115rh\n1       0       0       0       0       0   17931       0   19087       0\n2       0       0       1       5       1  293409       8  273704       1\n3    3058    4265    3248    3638    3747    3971    3192    3805    3753\n4       0       0       0       0       0       0       0       0       0\n5     167     199     113     168     175     203     158     108     110\n6      36      32      12      24      41      52      79      33      83\n  46121rh 46131rh 46132rh 46134rh 46138rh 46141rh 46142rh 46862rh 46863rh\n1       0       0   12703   18833       0   18702   17666       0   14834\n2       0       1  187975  285048       0  284499  250600       0  218494\n3    4134    3059    3116    3853    3682    2844    3466    3442    3300\n4       0       0       0       0       0       0       0       0       0\n5     179     137     145     183     171     138      88     154     157\n6      53      14      19      34      38      73      46      30      37\n  46865rh 46866rh 46867rh 46868rh 46871rh 46872rh 46873rh 46874rh 46875rh\n1   10546   10830   10316   10638   15248       0       0   11608   11561\n2  169516  152769  151732  190150  229063       6       1  165941  171303\n3    3242    3872    3656    3739    3473    3154    5510    3657    4121\n4       0       0       0       0       0       0       0       0       0\n5     131     152     152     155     140      80     240     148     112\n6      74      36      21      66      27      30      43      31      28\n  46876rh 46877rh 46878rh 46879rh 46881rh 46882rh 46883rh 46884rh 46885rh\n1       0       0   12683   15613       0   14084   20753       0       0\n2       0       2  183058  216122       0  199448  306081       0       5\n3    3422    3829    3996    4324    2592    2606    4600    2913    3614\n4       0       0       0       0       0       0       0       0       0\n5     147     166     169     215     115     101     174     127     151\n6      20      26      43      43      21      27      48      29      29\n  46886rh 46887rh 46888rh 46889rh 46890rh 46891rh 46892rh 46893rh 46895rh\n1   16639   16072       0   16680   13367       0   25119      92       0\n2  242543  258061       0  235530  196721       0  371037    1116       0\n3    3294    3719    3899    4173    4008    3037    5967    3459    4262\n4       0       0       0       0       0       0       0       0       0\n5     139     128     210     127     156     116     260     161     189\n6      21      34      25      45      67      24      60      45      41\n  46896rh 46897rh\n1   15934       0\n2  235343       6\n3    3923    3486\n4       0       0\n5     179     117\n6      58      28\n\n\nUpload the three metadata files we need, in order to join specimen IDs from the counts matrix to individual IDs in the clinical metadata (Note: you could use the ‘covars’ file you created in the previous exercise)\n\n#upload the three metadata files we need and join them (or use 'covars' from Portal_workshop_5XFADdata.Rmd)\n\nrna_metaID &lt;- \"syn22110328\"\nsynGet(rna_metaID, downloadLocation = \"files/\")\n\nFile(consortium=['MODEL-AD'], path='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv', createdOn='2020-05-31T20:38:13.220Z', dataType=['geneExpression'], metadataType=['assay'], isModelSystem=[False], files=['Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv'], study=['Jax.IU.Pitt_5XFAD'], createdBy='3347528', fileFormat=['csv'], isLatestVersion=True, cacheDir='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files', name='Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv', versionLabel='4', modifiedBy='3427512', grant=['U54AG054345'], modifiedOn='2023-05-19T20:43:30.418Z', versionNumber=4, _file_handle={'id': '75357585', 'etag': '9c34f6ea-5e65-440c-a4cb-5eeb985bd947', 'createdBy': '3417412', 'createdOn': '2021-04-26T08:20:25.000Z', 'modifiedOn': '2021-04-26T08:20:25.000Z', 'concreteType': 'org.sagebionetworks.repo.model.file.S3FileHandle', 'contentType': 'text/csv', 'contentMd5': '7bfeb136cc94cae8cebfbd4a0f2e72cb', 'fileName': 'Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv', 'storageLocationId': 41208, 'contentSize': 5476, 'status': 'AVAILABLE', 'bucketName': 'ad-knowledge-portal-main', 'key': 'data/3417412/38a12b9b-9744-4f2c-bcfe-fdfa377cfb9a/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv', 'previewId': '75357590', 'isPreview': False, 'externalURL': None}, etag='69fc8a06-b928-4f37-969d-47c7aa4c1ca1', id='syn22110328', resourceType=['metadata'], synapseStore=True, concreteType='org.sagebionetworks.repo.model.FileEntity', parentId='syn21983022', dataFileHandleId='75357585', assay=['rnaSeq'], modelSystemType=['animal'])\n\nrna_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_assay_RNAseq_metadata.csv\", show_col_types = FALSE)\n\nbio_metaID &lt;- \"syn22103213\"\nsynGet(bio_metaID, downloadLocation = \"files/\")\n\nFile(consortium=['MODEL-AD'], isModelSystem=[False], path='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv', study=['Jax.IU.Pitt_5XFAD'], files=['Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv'], fileFormat=['csv'], metadataType=['biospecimen'], modifiedOn='2023-05-19T20:43:19.849Z', _file_handle={'id': '75356382', 'etag': '2d04cb02-73ed-4702-b646-5ce724fb2985', 'createdBy': '3417412', 'createdOn': '2021-04-26T05:54:39.000Z', 'modifiedOn': '2021-04-26T05:54:39.000Z', 'concreteType': 'org.sagebionetworks.repo.model.file.S3FileHandle', 'contentType': 'text/csv', 'contentMd5': 'a7d5a4733df4948daaad8078dfd9b835', 'fileName': 'Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv', 'storageLocationId': 41208, 'contentSize': 36929, 'status': 'AVAILABLE', 'bucketName': 'ad-knowledge-portal-main', 'key': 'data/3417412/d3fc54fe-0bd9-4a0b-b64f-e08da782c25a/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv', 'previewId': '75356385', 'isPreview': False, 'externalURL': None}, cacheDir='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files', isLatestVersion=True, name='Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv', modifiedBy='3427512', grant=['U54AG054345'], etag='248c214b-5d5c-4e36-9aa6-127e9180e412', dataFileHandleId='75356382', id='syn22103213', resourceType=['metadata'], synapseStore=True, createdOn='2020-05-28T17:36:33.824Z', concreteType='org.sagebionetworks.repo.model.FileEntity', parentId='syn21983022', createdBy='3346982', versionLabel='3', modelSystemType=['animal'], versionNumber=3)\n\nbio_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_biospecimen_metadata.csv\", show_col_types = FALSE)\n\nind_metaID &lt;- \"syn22103212\"\nsynGet(ind_metaID, downloadLocation = \"files/\")\n\nFile(study=['Jax.IU.Pitt_5XFAD'], etag='b2c027b9-c62a-444b-ade1-abca9c99da2a', dataFileHandleId='124762661', isLatestVersion=True, cacheDir='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files', modifiedOn='2023-06-01T18:05:16.052Z', versionLabel='4', name='Jax.IU.Pitt_5XFAD_individual_metadata.csv', modifiedBy='3427512', versionNumber=4, metadataType=['individual'], createdOn='2020-05-28T17:36:32.156Z', resourceType=['metadata'], synapseStore=True, files=['Jax.IU.Pitt_5XFAD_individual_metadata(1).csv'], _file_handle={'id': '124762661', 'etag': 'fbf74349-e88e-4dbb-b5af-8f30c007665b', 'createdBy': '3427512', 'createdOn': '2023-05-19T20:43:50.000Z', 'modifiedOn': '2023-05-19T20:43:50.000Z', 'concreteType': 'org.sagebionetworks.repo.model.file.S3FileHandle', 'contentType': 'text/csv', 'contentMd5': '7b66876f4306b102691f7f8eee781f83', 'fileName': 'Jax.IU.Pitt_5XFAD_individual_metadata.csv', 'storageLocationId': 41208, 'contentSize': 39725, 'status': 'AVAILABLE', 'bucketName': 'ad-knowledge-portal-main', 'key': 'data/3427512/328ad101-e935-43d1-9f01-aa0985bbb14d/Jax.IU.Pitt_5XFAD_individual_metadata.csv', 'previewId': '124762662', 'isPreview': False, 'externalURL': None}, concreteType='org.sagebionetworks.repo.model.FileEntity', path='/Users/alinden/Desktop/sage-repos/originals/ADPortalWorkshops/files/Jax.IU.Pitt_5XFAD_individual_metadata(1).csv', parentId='syn21983022', createdBy='3346982', id='syn22103212')\n\nind_meta &lt;- read_csv(\"files/Jax.IU.Pitt_5XFAD_individual_metadata.csv\", show_col_types = FALSE)\n\nJoin the three metadata files by IDs in common\n\n#join the metadata files\njoined_meta &lt;- rna_meta %&gt;% #start with the rnaseq assay metadata\n  left_join(bio_meta, by = \"specimenID\") %&gt;%  #join rows from biospecimen that match specimenID \n  left_join(ind_meta, by = \"individualID\") # join rows from individual that match individualID\n\njoined_meta\n\n# A tibble: 72 × 56\n   speci…¹ platf…² RIN   rnaBa…³ libra…⁴ seque…⁵ libra…⁶ libra…⁷ isStr…⁸ readS…⁹\n   &lt;chr&gt;   &lt;chr&gt;   &lt;lgl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;lgl&gt;   &lt;lgl&gt;   &lt;lgl&gt;  \n 1 32043rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 2 32044rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 3 32046rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 4 32047rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 5 32049rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 6 32057rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 7 32061rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 8 32065rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n 9 32067rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n10 32070rh Illumi… NA          1       1       1 polyAs… NA      FALSE   NA     \n# … with 62 more rows, 46 more variables: runType &lt;chr&gt;, readLength &lt;dbl&gt;,\n#   individualID &lt;dbl&gt;, specimenIdSource &lt;chr&gt;, organ &lt;chr&gt;, tissue &lt;chr&gt;,\n#   BrodmannArea &lt;lgl&gt;, sampleStatus &lt;chr&gt;, tissueWeight &lt;lgl&gt;,\n#   tissueVolume &lt;lgl&gt;, nucleicAcidSource &lt;lgl&gt;, cellType &lt;lgl&gt;,\n#   fastingState &lt;lgl&gt;, isPostMortem &lt;lgl&gt;, samplingAge &lt;lgl&gt;,\n#   individualIdSource &lt;chr&gt;, species &lt;chr&gt;, sex &lt;chr&gt;, genotype &lt;chr&gt;,\n#   genotypeBackground &lt;chr&gt;, room &lt;chr&gt;, litter &lt;chr&gt;, matingID &lt;chr&gt;, …\n\n\nCreate a timepoint variable (Months since birth)\n\nlibrary(lubridate)\n\n# convert columns of strings to month-date-year format\njoined_meta_time &lt;- joined_meta %&gt;% \n  mutate(dateBirth = mdy(dateBirth), dateDeath = mdy(dateDeath)) %&gt;% \n  # create a new column that subtracts dateBirth from dateDeath in days, then divide by 30 to get months\n  mutate(timepoint = as.numeric(difftime(dateDeath, dateBirth, units =\"days\"))/30) %&gt;% \n  # convert numeric ages to timepoint categories\n  mutate(timepoint = case_when(timepoint &gt; 10 ~ \"12 mo\",\n                               timepoint &lt; 10 & timepoint &gt; 5 ~ \"6 mo\",\n                               timepoint &lt; 5 ~ \"4 mo\"))\n\n# check that the timepoint column looks ok (should be 6 mice in each group)\njoined_meta_time %&gt;% \n  dplyr::group_by(sex, genotype, timepoint) %&gt;% \n  dplyr::count()\n\n# A tibble: 12 × 4\n# Groups:   sex, genotype, timepoint [12]\n   sex    genotype         timepoint     n\n   &lt;chr&gt;  &lt;chr&gt;            &lt;chr&gt;     &lt;int&gt;\n 1 female 5XFAD_carrier    12 mo         6\n 2 female 5XFAD_carrier    4 mo          6\n 3 female 5XFAD_carrier    6 mo          6\n 4 female 5XFAD_noncarrier 12 mo         6\n 5 female 5XFAD_noncarrier 4 mo          6\n 6 female 5XFAD_noncarrier 6 mo          6\n 7 male   5XFAD_carrier    12 mo         6\n 8 male   5XFAD_carrier    4 mo          6\n 9 male   5XFAD_carrier    6 mo          6\n10 male   5XFAD_noncarrier 12 mo         6\n11 male   5XFAD_noncarrier 4 mo          6\n12 male   5XFAD_noncarrier 6 mo          6\n\n\nSelect the covariates needed for the analysis\n\ncovars &lt;- joined_meta_time %&gt;% \n  dplyr::select(individualID, specimenID, sex, genotype, timepoint)\n\nPICK UP HERE TO REUSE DATAFRAMES GENERATED IN 5XFAD_data_R_tutorial.qmd\n\n# coerce covars into a dataframe, label the rows by specimenID, and check the result\ncovars &lt;- as.data.frame(covars)\nrownames(covars) &lt;- covars$specimenID\ncovars\n\n        individualID specimenID    sex         genotype timepoint\n32043rh        32043    32043rh female    5XFAD_carrier     12 mo\n32044rh        32044    32044rh   male 5XFAD_noncarrier     12 mo\n32046rh        32046    32046rh   male 5XFAD_noncarrier     12 mo\n32047rh        32047    32047rh   male 5XFAD_noncarrier     12 mo\n32049rh        32049    32049rh female 5XFAD_noncarrier     12 mo\n32057rh        32057    32057rh female 5XFAD_noncarrier     12 mo\n32061rh        32061    32061rh   male 5XFAD_noncarrier     12 mo\n32065rh        32065    32065rh female 5XFAD_noncarrier     12 mo\n32067rh        32067    32067rh female 5XFAD_noncarrier     12 mo\n32070rh        32070    32070rh female 5XFAD_noncarrier     12 mo\n32073rh        32073    32073rh   male 5XFAD_noncarrier     12 mo\n32074rh        32074    32074rh   male 5XFAD_noncarrier     12 mo\n46105rh        46105    46105rh female 5XFAD_noncarrier      6 mo\n46106rh        46106    46106rh female 5XFAD_noncarrier      6 mo\n46107rh        46107    46107rh female 5XFAD_noncarrier      6 mo\n46108rh        46108    46108rh   male 5XFAD_noncarrier      6 mo\n46109rh        46109    46109rh   male 5XFAD_noncarrier      6 mo\n46110rh        46110    46110rh   male 5XFAD_noncarrier      6 mo\n46112rh        46112    46112rh female 5XFAD_noncarrier      6 mo\n46115rh        46115    46115rh female 5XFAD_noncarrier      6 mo\n46121rh        46121    46121rh female 5XFAD_noncarrier      6 mo\n46131rh        46131    46131rh female 5XFAD_noncarrier      4 mo\n46138rh        46138    46138rh female 5XFAD_noncarrier      4 mo\n46862rh        46862    46862rh female 5XFAD_noncarrier      4 mo\n46872rh        46872    46872rh   male 5XFAD_noncarrier      6 mo\n46873rh        46873    46873rh   male 5XFAD_noncarrier      6 mo\n46876rh        46876    46876rh   male 5XFAD_noncarrier      6 mo\n46877rh        46877    46877rh   male 5XFAD_noncarrier      4 mo\n46881rh        46881    46881rh female 5XFAD_noncarrier      4 mo\n46884rh        46884    46884rh   male 5XFAD_noncarrier      4 mo\n46887rh        46887    46887rh female    5XFAD_carrier      4 mo\n46888rh        46888    46888rh   male 5XFAD_noncarrier      4 mo\n46891rh        46891    46891rh   male 5XFAD_noncarrier      4 mo\n46893rh        46893    46893rh female 5XFAD_noncarrier      4 mo\n46895rh        46895    46895rh   male 5XFAD_noncarrier      4 mo\n46897rh        46897    46897rh   male 5XFAD_noncarrier      4 mo\n32048rh        32048    32048rh female    5XFAD_carrier     12 mo\n32050rh        32050    32050rh female 5XFAD_noncarrier     12 mo\n32052rh        32052    32052rh female    5XFAD_carrier     12 mo\n32053rh        32053    32053rh   male    5XFAD_carrier     12 mo\n32059rh        32059    32059rh   male    5XFAD_carrier     12 mo\n32062rh        32062    32062rh   male    5XFAD_carrier     12 mo\n32068rh        32068    32068rh female    5XFAD_carrier     12 mo\n32075rh        32075    32075rh   male    5XFAD_carrier     12 mo\n32078rh        32078    32078rh female    5XFAD_carrier     12 mo\n32081rh        32081    32081rh female    5XFAD_carrier     12 mo\n32088rh        32088    32088rh   male    5XFAD_carrier     12 mo\n32640rh        32640    32640rh   male    5XFAD_carrier     12 mo\n46111rh        46111    46111rh female    5XFAD_carrier      6 mo\n46113rh        46113    46113rh female    5XFAD_carrier      6 mo\n46132rh        46132    46132rh female    5XFAD_carrier      6 mo\n46134rh        46134    46134rh female    5XFAD_carrier      4 mo\n46141rh        46141    46141rh female    5XFAD_carrier      4 mo\n46142rh        46142    46142rh female    5XFAD_carrier      4 mo\n46863rh        46863    46863rh female    5XFAD_carrier      6 mo\n46865rh        46865    46865rh   male    5XFAD_carrier      6 mo\n46866rh        46866    46866rh   male    5XFAD_carrier      4 mo\n46867rh        46867    46867rh   male    5XFAD_carrier      4 mo\n46868rh        46868    46868rh   male    5XFAD_carrier      4 mo\n46871rh        46871    46871rh female    5XFAD_carrier      6 mo\n46874rh        46874    46874rh   male    5XFAD_carrier      6 mo\n46875rh        46875    46875rh   male    5XFAD_carrier      6 mo\n46878rh        46878    46878rh   male    5XFAD_carrier      4 mo\n46879rh        46879    46879rh   male    5XFAD_carrier      4 mo\n46882rh        46882    46882rh female    5XFAD_carrier      4 mo\n46883rh        46883    46883rh female    5XFAD_carrier      4 mo\n46885rh        46885    46885rh female 5XFAD_noncarrier      4 mo\n46886rh        46886    46886rh female    5XFAD_carrier      6 mo\n46889rh        46889    46889rh   male    5XFAD_carrier      6 mo\n46890rh        46890    46890rh   male    5XFAD_carrier      6 mo\n46892rh        46892    46892rh   male    5XFAD_carrier      6 mo\n46896rh        46896    46896rh   male    5XFAD_carrier      4 mo\n\n\nThis time, we’ll use a different package to translate mouse ENSEMBL IDS to gene names. Run these two functions and they will be called up when assembling results from the differential expression analysis\n\n# functions to extract entrezid and symbols from ENSEMBL IDs\nmap_symbol.rname &lt;- function(x){\n\nmapIds(org.Mm.eg.db,keys=row.names(x),column=\"SYMBOL\",keytype=\"ENSEMBL\",multiVals=\"first\")}\nmap_eid.rname &lt;- function(x) {mapIds(org.Mm.eg.db,keys=row.names(x),column=\"ENTREZID\",keytype=\"ENSEMBL\",multiVals=\"first\")}\n\nOrder the data (counts columns and metadata rows MUST be in the same order), and subset the counts matrix and metadata to include only 12 month old male mice\n\nrownames(counts) &lt;- counts$gene_id\ncounts &lt;- counts[-1]\nrawdata &lt;- counts[,sort(colnames(counts))]\n\nmetadata &lt;- covars[sort(rownames(covars)),]\n\nmeta.12M.Male &lt;- metadata[(metadata$sex==\"male\" & metadata$timepoint=='12 mo'),]\ndat &lt;- as.matrix(rawdata[,colnames(rawdata) %in% rownames(meta.12M.Male)])\n\nDifferential Analysis using DESeq2: set up data for analysis\n\n#combine metadata info with the read counts\nddsHTSeq &lt;- DESeqDataSetFromMatrix(countData=dat, colData=meta.12M.Male, design = ~genotype)\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n# filtering low count genes\nddsHTSeq &lt;- ddsHTSeq[rowSums(counts(ddsHTSeq)) &gt;= 1,]  \n\n#selecting WT mice as reference genotype\nddsHTSeq$genotype &lt;- relevel(ddsHTSeq$genotype,ref=\"5XFAD_noncarrier\")     \n\nRun DESeq\n\n#run DESeq: this function normalizes the read counts, estimates dispersions, and fits the linear model\ndds &lt;- DESeq(ddsHTSeq,parallel = TRUE)\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates: 6 workers\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates, fitting model and testing: 6 workers\n\n\nData wrangle to extract a downloadable table of results\n\n# setting 0.05 as significant threshold\nres &lt;- results(dds,alpha=0.05)                        \nsummary(res)\n\n\nout of 40784 with nonzero total read count\nadjusted p-value &lt; 0.05\nLFC &gt; 0 (up)       : 1091, 2.7%\nLFC &lt; 0 (down)     : 492, 1.2%\noutliers [1]       : 33, 0.081%\nlow counts [2]     : 15803, 39%\n(mean count &lt; 6)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n# generating differential expression results table for all genes, and map mouse short gene names to ensembl labels\nAll_res &lt;- as.data.frame(res) %&gt;% mutate(symbol = map_symbol.rname(res)) %&gt;% mutate(EntrezGene = map_eid.rname(res)) %&gt;%  dplyr::select(\"symbol\", \"EntrezGene\",\"baseMean\", \"log2FoldChange\", \"lfcSE\", \"stat\", \"pvalue\", \"padj\")\n\n'select()' returned 1:many mapping between keys and columns\n'select()' returned 1:many mapping between keys and columns\n\n#label human gene names\nAll_res[1, \"symbol\"] &lt;- \"PSEN1\"\nAll_res[2, \"symbol\"] &lt;- \"APP\"\n\nhead(All_res)\n\n                   symbol EntrezGene     baseMean log2FoldChange      lfcSE\nENSG00000080815     PSEN1       &lt;NA&gt;   8063.75087    16.43362659 0.83494694\nENSG00000142192       APP       &lt;NA&gt; 123183.70706    16.53067797 0.37385139\nENSMUSG00000000001  Gnai3      14679   3737.92736     0.01485591 0.04670563\nENSMUSG00000000028  Cdc45      12544    138.56440    -0.07125899 0.15554445\nENSMUSG00000000031    H19      14955     29.29858     0.67055831 0.35732817\nENSMUSG00000000037  Scml2     107815    123.64893    -0.21840176 0.15610915\n                         stat       pvalue         padj\nENSG00000080815    19.6822407 3.061625e-86 2.121706e-83\nENSG00000142192    44.2172436 0.000000e+00 0.000000e+00\nENSMUSG00000000001  0.3180754 7.504278e-01 9.471513e-01\nENSMUSG00000000028 -0.4581262 6.468618e-01 9.196556e-01\nENSMUSG00000000031  1.8765896 6.057437e-02 3.637962e-01\nENSMUSG00000000037 -1.3990324 1.618033e-01 5.809593e-01\n\n\nVolcano plot of differential expression results: all genes with p &lt; 0.05 and log2FC &gt; 0.1\n\n  plot_DEGvolcano &lt;- EnhancedVolcano(All_res,\n                                     lab = (All_res$symbol),\n                                     x = 'log2FoldChange',\n                                     y = 'padj',legendPosition = 'none',\n                                     title = 'DE Results of 12 mo. old Male Mice',\n                                     subtitle = '',\n                                     FCcutoff = 0.1,\n                                     pCutoff = 0.05,\n                                     xlim = c(-3, 17)\n                                     )\n\nWarning: One or more p-values is 0. Converting to 10^-1 * current lowest\nnon-zero p-value...\n\n  plot_DEGvolcano\n\n\n\n\nSave results table and plot:\n\nAll_res$ensembl &lt;- row.names(All_res)\nwrite.csv(All_res, file=\"outputs/5XFAD_DEresults_12mo_males.csv\", row.names=FALSE)\n\nggsave(\"outputs/VolcanoPlot.png\")\n\nSaving 7 x 5 in image"
  }
]